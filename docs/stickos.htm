<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 14 (filtered)">

<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Helvetica;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;}
@font-face
	{font-family:"Tms Rmn";
	panose-1:2 2 6 3 4 5 5 2 3 4;}
@font-face
	{font-family:Helv;
	panose-1:2 11 6 4 2 2 2 3 2 4;}
@font-face
	{font-family:"New York";
	panose-1:2 4 5 3 6 5 6 2 3 4;}
@font-face
	{font-family:System;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:Batang;
	panose-1:2 3 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:PMingLiU;
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Gothic";
	panose-1:2 11 6 9 7 2 5 8 2 4;}
@font-face
	{font-family:Dotum;
	panose-1:2 11 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:SimHei;
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:MingLiU;
	panose-1:2 2 5 9 0 0 0 0 0 0;}
@font-face
	{font-family:Mincho;
	panose-1:2 2 6 9 4 3 5 8 3 5;}
@font-face
	{font-family:Gulim;
	panose-1:2 11 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:Century;
	panose-1:2 4 6 4 5 5 5 2 3 4;}
@font-face
	{font-family:"Angsana New";
	panose-1:2 2 6 3 5 4 5 2 3 4;}
@font-face
	{font-family:"Cordia New";
	panose-1:2 11 3 4 2 2 2 2 2 4;}
@font-face
	{font-family:Mangal;
	panose-1:2 4 5 3 5 2 3 3 2 2;}
@font-face
	{font-family:Latha;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Sylfaen;
	panose-1:1 10 5 2 5 3 6 3 3 3;}
@font-face
	{font-family:Vrinda;
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:Raavi;
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:Shruti;
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:Sendnya;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Gautami;
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:Tunga;
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Estrangelo Edessa";
	panose-1:3 8 6 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	
	font-family:"Times New Roman","serif";}
h1
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:.3in;
	text-indent:-.3in;
	page-break-after:avoid;
	
	font-family:"Arial","sans-serif";}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:.4in;
	text-indent:-.4in;
	page-break-after:avoid;
	
	font-family:"Arial","sans-serif";
	font-style:italic;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	text-indent:0in;
	page-break-after:avoid;
	
	font-family:"Arial","sans-serif";}
h4
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	page-break-after:avoid;
	
	font-family:"Times New Roman","serif";}
h5
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	
	font-family:"Times New Roman","serif";
	font-style:italic;}
h6
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	
	font-family:"Times New Roman","serif";}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-link:"Heading 7 Char";
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	
	font-family:"Times New Roman","serif";}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	
	font-family:"Times New Roman","serif";
	font-style:italic;}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	
	font-family:"Arial","sans-serif";}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin:0in;
	margin-bottom:.0001pt;
	
	font-family:"Times New Roman","serif";}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:12.0pt;
	margin-bottom:.0001pt;
	
	font-family:"Times New Roman","serif";}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:24.0pt;
	margin-bottom:.0001pt;
	
	font-family:"Times New Roman","serif";}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	
	font-family:"Times New Roman","serif";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	
	font-family:"Times New Roman","serif";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{margin:0in;
	margin-bottom:.0001pt;
	
	font-family:"Tahoma","sans-serif";}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Arial","sans-serif";
	font-weight:bold;}
p.Computerentry, li.Computerentry, div.Computerentry
	{mso-style-name:"Computer entry";
	mso-style-link:"Computer entry Char";
	margin:0in;
	margin-bottom:.0001pt;
	
	font-family:"Courier New";
	font-weight:bold;}
p.Computer, li.Computer, div.Computer
	{mso-style-name:Computer;
	margin:0in;
	margin-bottom:.0001pt;
	
	font-family:"Courier New";}
span.Heading7Char
	{mso-style-name:"Heading 7 Char";
	mso-style-link:"Heading 7";}
p.Computerparameter, li.Computerparameter, div.Computerparameter
	{mso-style-name:"Computer parameter";
	mso-style-link:"Computer parameter Char";
	margin:0in;
	margin-bottom:.0001pt;
	
	font-family:"Courier New";
	font-style:italic;}
span.ComputerentryChar
	{mso-style-name:"Computer entry Char";
	mso-style-link:"Computer entry";
	font-family:"Courier New";
	font-weight:bold;}
span.ComputerparameterChar
	{mso-style-name:"Computer parameter Char";
	mso-style-link:"Computer parameter";
	font-family:"Courier New";
	font-style:italic;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Arial","sans-serif";
	font-weight:bold;
	font-style:italic;}
span.msoIns
	{mso-style-name:"";
	text-decoration:underline;
	color:teal;}
span.msoDel
	{mso-style-name:"";
	text-decoration:line-through;
	color:red;}
 /* Page Definitions */
 @page WordSection1
	{size:5.5in 8.5in;
	margin:.4in .4in .4in .4in;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US link=blue vlink=purple>

<div class=WordSection1>

<p class=MsoNormal align=center style='text-align:center'><b><span
style='font-size:20.0pt'>&nbsp;</span></b></p>

<p class=MsoNormal align=center style='text-align:center'><b><span
style=''>StickOS™ BASIC User's Guide,  v1.90</span></b></p>

<p class=MsoNormal align=center style='text-align:center'><a
href="https://github.com/rtestardi/StickOS/">https://github.com/rtestardi/StickOS</a></p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_Toc306801241">1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Overview</a><img width=344 height=344 src="stickos_files/image007.gif"
align=right></h1>

<p class=MsoNormal>StickOS BASIC is an <i>entirely</i> <i>MCU-resident</i> interactive
programming environment, which includes an easy-to-use editor, transparent
line-by-line compiler, interactive debugger, performance profiler, and flash
filesystem, all running entirely within the MCU and controlled thru an
interactive command-line user interface.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In StickOS, external MCU pins may be bound to BASIC “pin
variables” for manipulation or examination, and internal MCU peripherals may be
managed by BASIC control statements and interrupt handlers.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A StickOS-capable MCU may be connected to a host computer via
a variety of transports and may then be controlled by any terminal emulator program,
<i>with no additional software or hardware required on the host computer</i>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Additionally, when coupled with an MC13201 ZigFlea Wireless
Transceiver, the MCU may be remotely controlled by another MCU, via a
telnet/rlogin-like interface, eliminating the need for a direct connection to
the host computer altogether.  Also, BASIC programs may trivially remotely access
variables on other MCUs, enabling the use of “remote pin variables” or other
forms of inter-MCU communication.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>On selected MCUs, the USB interface can optionally be
configured into USB Host Mode, creating a trivial data logger to an external
USB flash drive.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Once program development is complete, the MCU may be disconnected
from the host computer and configured to autorun its resident BASIC program
autonomously.</p>

<p class=MsoNormal>                                                                                                       </p>

<span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal>By its very nature, StickOS supports in-circuit emulation
when it is running -- all you need is a transport connecting the MCU to a host
computer, and you have full control over the target embedded system, just as if
you were using an in-circuit emulator!  Alternatively, you can use the 2.4GHz zigflea
wireless transport and have full control over the target embedded system with
no connected transport at all!!!</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The StickOS BASIC programming environment includes the
following features:</p>

<p class=MsoNormal>&nbsp;</p>

<ul style='margin-top:0in' type=circle>
 <li class=MsoNormal>BASIC line editor</li>
 <ul style='margin-top:0in' type=circle>
  <li class=MsoNormal>ansi or vt100'ish terminal support</li>
 </ul>
 <li class=MsoNormal>BASIC compiler</li>
 <ul style='margin-top:0in' type=circle>
  <li class=MsoNormal>compiles to a fast and safe intermediate bytecode</li>
  <li class=MsoNormal>transparent line-by-line compilation is invisible to the
      user</li>
  <li class=MsoNormal>integer variable/array support</li>
  <li class=MsoNormal>string variable support</li>
  <li class=MsoNormal>block structured programming and subroutine support</li>
  <li class=MsoNormal>BASIC library <span style='color:red'>(v1.90+)</span></li>
 </ul>
 <li class=MsoNormal>interactive BASIC debugger, supporting:</li>
 <ul style='margin-top:0in' type=circle>
  <li class=MsoNormal>breakpoints, assertions, and watchpoints</li>
  <li class=MsoNormal>live variable (and pin) manipulation and examination</li>
  <li class=MsoNormal>execution tracing and single-stepping</li>
  <li class=MsoNormal>edit-and-continue!</li>
 </ul>
 <li class=MsoNormal>BASIC performance profiler</li>
 <ul style='margin-top:0in' type=circle>
  <li class=MsoNormal>trivially see where your program spends its time!</li>
 </ul>
 <li class=MsoNormal>BASIC file system</li>
 <ul style='margin-top:0in' type=circle>
  <li class=MsoNormal>load and store multiple BASIC programs in flash</li>
 </ul>
 <li class=MsoNormal>2.4GHz zigflea wireless transport</li>
 <ul style='margin-top:0in' type=circle>
  <li class=MsoNormal>remote control via a telnet/rlogin-like interface</li>
  <li class=MsoNormal>remote variable access in BASIC</li>
  <li class=MsoNormal>wireless BASIC program update</li>
  <li class=MsoNormal>wireless StickOS firmware upgrade</li>
 </ul>
 <li class=MsoNormal>USB Host Mode (on selected MCUs)</li>
 <ul style='margin-top:0in' type=circle>
  <li class=MsoNormal>log StickOS &quot;print&quot; statements to external USB
      flash drive</li>
 </ul>
 <li class=MsoNormal>external control of MCU I/O pins, implicit thru &quot;pin
     variables&quot;</li>
</ul>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>digital input or output</p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>analog input or output (PWM actually)</p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>servo output</p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>frequency output</p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>uart input or output</p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>i2c master input and output</p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>qspi master input and output</p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>4-bit HD44780-compatible LCD output</p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>4x4 scanned keypad input</p>

<ul style='margin-top:0in' type=circle>
 <li class=MsoNormal>internal peripheral control</li>
 <ul style='margin-top:0in' type=circle>
  <li class=MsoNormal>interrupts delivered to BASIC handlers!</li>
  <li class=MsoNormal>interval timers, dma timers, ADC, PWM, uarts, i2c, qspi,
      etc.</li>
  <li class=MsoNormal>direct MCU register access from BASIC for low-level
      control, thru MCU register variables</li>
 </ul>
 <li class=MsoNormal>internal flash memory control</li>
 <ul style='margin-top:0in' type=circle>
  <li class=MsoNormal>save programs and parameters to flash for standalone
      operation</li>
  <li class=MsoNormal>prolong flash lifetime by storing incremental updates in
      RAM</li>
  <li class=MsoNormal>clone one MCU’s flash directly to another</li>
  <li class=MsoNormal>upgrade StickOS firmware via terminal emulator!</li>
  <li class=MsoNormal>no external flash programmers needed!</li>
 </ul>
</ul>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that for the purposes of examples in this User’s Guide,
we’ll be running StickOS primarily on an MCF52221 and MCF51JM128; other MCUs
are similar.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center'><b>Table of Contents</b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc306801241">1<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>Overview<span style='color:windowtext;
display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>1</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc306801242">2<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>Examples<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>6</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc306801243">2.1<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>Embedded Systems Made Easy<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>6</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc306801244">2.2<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>Embedded Systems Made Functional!<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>9</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc306801245">2.3<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>Wireless Embedded Systems Made Just as
Easy!<span style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>13</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc306801246">2.4<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>More Examples<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>16</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801247">2.4.1<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Digital I/O Example<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>16</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801248">2.4.2<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Analog I/O Example<span style='color:
windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>18</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801249">2.4.3<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Servo I/O Example<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>19</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801250">2.4.4<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Frequency I/O Example<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>20</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801251">2.4.5<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>UART I/O Example<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>21</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801252">2.4.6<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>I2C Master I/O Example<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>22</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801253">2.4.7<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>QSPI Master I/O Example<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>23</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc306801254">3<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>MCU Connections<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>24</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc306801255">3.1<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>Interface<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>24</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc306801256">3.2<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>External Pins<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>24</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc306801257">3.3<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>Command-Line Transports<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>25</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801258">3.3.1<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>USB Transport<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>26</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801259">3.3.2<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>USB Host Mode<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>32</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801260">3.3.3<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>UART Transport<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>33</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801261">3.3.4<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Ethernet Transport<span style='color:
windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>35</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc306801262">4<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>StickOS<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>36</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc306801263">4.1<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>First Boot &amp; Pin Assignments<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>37</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc306801264">4.2<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>Command-Line<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>40</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801265">4.2.1<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>StickOS Commands<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>41</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801266">4.2.2<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Getting Help<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>41</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801267">4.2.3<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Entering Programs<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>43</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801268">4.2.4<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Running Programs<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>47</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801269">4.2.5<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Loading and Storing Programs<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>49</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801270">4.2.6<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>BASIC Library<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>50</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801271">4.2.7<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Debugging Programs<span style='color:
windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>52</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801272">4.2.8<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Other Commands<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>56</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc306801273">4.3<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>BASIC Program Statements<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>58</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801274">4.3.1<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Variable Declarations<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>58</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801275">4.3.2<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>System Variables<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>62</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801276">4.3.3<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Variable Assignments<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>63</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801277">4.3.4<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Expressions<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>65</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801278">4.3.5<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Strings<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>67</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801279">4.3.6<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Print Statements<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>69</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801280">4.3.7<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Variable Print Statements<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>70</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801281">4.3.8<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Input Statements<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>71</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801282">4.3.9<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>         </span>Read/Data Statements<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>72</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801283">4.3.10<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>Conditional Statements<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>73</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801284">4.3.11<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>Looping Conditional Statements<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>74</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801285">4.3.12<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>Subroutines<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>77</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801286">4.3.13<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>Timers<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>79</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801287">4.3.14<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>Digital I/O<span style='color:windowtext;
display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>81</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801288">4.3.15<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>Analog I/O<span style='color:windowtext;
display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>82</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801289">4.3.16<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>Servo I/O<span style='color:windowtext;
display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>84</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801290">4.3.17<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>Frequency I/O<span style='color:windowtext;
display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>85</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801291">4.3.18<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>UART I/O<span style='color:windowtext;
display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>86</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801292">4.3.19<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>I2C Master I/O<span style='color:windowtext;
display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>89</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801293">4.3.20<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>QSPI Master I/O<span style='color:windowtext;
display:none;text-decoration:none'>.. </span><span
style='color:windowtext;display:none;text-decoration:none'>90</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801294">4.3.21<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>Pin Interrupts<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>91</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801295">4.3.22<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>4x4 Scanned Keypad Support<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>92</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801296">4.3.23<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>HD44780-compatible LCD Support<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>94</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801297">4.3.24<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>Other Statements<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>95</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc306801298">4.4<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>Performance<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>96</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc306801299">5<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>2.4GHz ZigFlea Wireless Operation<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>97</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc306801300">5.1<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>ZigFlea Configuration<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>97</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc306801301">5.2<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>ZigFlea Remote Control<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>97</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc306801302">5.3<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>ZigFlea Remote Variables<span
style='color:windowtext;display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>98</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc306801303">6<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>Standalone Operation<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>99</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc306801304">7<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>Slave Operation<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>100</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc306801305">8<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>MCU Cloning<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>101</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc306801306">9<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>        </span>MCU Downloading<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>101</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc306801307">10<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>      </span>MCU Upgrading<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>102</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc306801308">11<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>      </span>Appendix<span style='color:windowtext;
display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>103</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc306801309">11.1<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>      </span>StickOS Command Reference<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>103</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801310">11.1.1<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>Commands<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>103</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801311">11.1.2<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>Modes<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>103</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc306801312">11.2<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>      </span>BASIC Program Statement Reference<span
style='color:windowtext;display:none;text-decoration:none'>. </span><span
style='color:windowtext;display:none;text-decoration:none'>104</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801313">11.2.1<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>Statements<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>104</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801314">11.2.2<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>Block Statements<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>104</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801315">11.2.3<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>Device Statements<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>105</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801316">11.2.4<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>Expressions<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>105</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801317">11.2.5<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>Strings<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>106</span></a></span></p>

<p class=MsoToc3><span class=MsoHyperlink><a href="#_Toc306801318">11.2.6<span
style='font-family:"Calibri","sans-serif";color:windowtext;
text-decoration:none'>       </span>Variables<span style='color:windowtext;
display:none;text-decoration:none'> </span><span
style='color:windowtext;display:none;text-decoration:none'>106</span></a></span></p>

<span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal>&nbsp;</p>

<h1>2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><a
name="_Toc306801242">Examples</a></h1>

<h2><a name="_Toc306801243">2.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span>Embedded Systems Made Easy</a></h2>

<p class=MsoNormal>A simple embedded system, like a toaster oven temperature
profile controller, can be brought online in record time!</p>

<p class=MsoNormal><img width=432 height=264 src="stickos_files/image008.gif"></p>

<p class=MsoNormal><b><i>It’s as easy as...</i></b></p>

<p class=MsoNormal>&nbsp;</p>

<ol style='margin-top:0in' start=1 type=1>
 <li class=MsoNormal>wire the MCU I/O pins to the embedded circuit</li>
 <ol style='margin-top:0in' start=1 type=a>
  <li class=MsoNormal>wire MCU pin an0 to thermocouple op-amp output<br>
      (I use an LM358)</li>
  <li class=MsoNormal>wire MCU pin an1 to solid state relay control input<br>
      (I use a Teledyne STH24D25)</li>
 </ol>
 <li class=MsoNormal>install the <a href="#_cpustick.inf_file">cpustick.inf</a>
     file by saving it to a file, right-clicking on the file, and selecting &quot;Install&quot;;
     you can ignore warnings about an unsigned driver package -- the driver is
     straight from Microsoft, and only the INF file is unsigned; the INF file
     allows Windows to bind a human readable name, &quot;CPUStick&quot;, to the
     USB VID/PID presented to the host by StickOS</li>
 <li class=MsoNormal>connect a host computer to the USB interface on the MCU</li>
 <li class=MsoNormal>let the host computer automatically install the new
     hardware</li>
 <li class=MsoNormal>open a Hyper Terminal console window and connect to the MCU;
     press <b><span style='font-family:"Courier New"'>&lt;Enter</span></b>&gt;
     for a command prompt</li>
 <li class=MsoNormal>configure the MCU I/O pins as appropriate</li>
 <ol style='margin-top:0in' start=1 type=a>
  <li class=MsoNormal>configure pin an0 as an analog input</li>
  <li class=MsoNormal>configure pin an1 as a digital output</li>
 </ol>
 <li class=MsoNormal>write and debug your BASIC control program, live on the MCU
     (see below)</li>
 <li class=MsoNormal>type “save”</li>
 <li class=MsoNormal>type “autorun on”</li>
 <li class=MsoNormal>turn the toaster oven full on (so that the relay can control
     it)</li>
 <li class=MsoNormal>type “reset”</li>
 <li class=MsoNormal>disconnect the host computer from the USB interface on the
     MCU</li>
</ol>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The entire toaster oven temperature profile controller BASIC
control program is shown below:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='color:black'><img border=0
width=531 height=528 src="stickos_files/image009.jpg"></span></p>

<p class=MsoNormal>&nbsp;</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>Line 10 declares two simple RAM variables named “<span
     style='font-family:"Courier New"'>target</span>” and “<span
     style='font-family:"Courier New"'>secs</span>” for use in the program, and
     initializes them to 0.</li>
 <li class=MsoNormal>Line 20 declares an analog input &quot;pin variable&quot; named
     “<span style='font-family:"Courier New"'>thermocouple</span>” that is bound
     to pin <i>an0</i>, to read the thermocouple voltage, in millivolts</li>
 <li class=MsoNormal>Line 30 declares a digital output &quot;pin variable&quot;
     named “<span style='font-family:"Courier New"'>relay</span>” that is bound
     to pin <i>an1</i>, to control the solid state relay.</li>
 <li class=MsoNormal>Line 40 declares the temperature target and delay time
     pairs for our temperature profile ramp.</li>
 <li class=MsoNormal>Lines 50 and 60 configure a timer interrupt to call the
     &quot;<span style='font-family:"Courier New"'>adjust</span>&quot; subroutine
     asynchronously, every second, while the program runs.</li>
 <li class=MsoNormal>Lines 70 thru 100 set the target temperature profile while
     the program runs.</li>
 <li class=MsoNormal>Lines 110 and 120 end the program with the solid state relay
     control turned off.</li>
 <li class=MsoNormal>Lines 130 thru 190 use the declared pin variables to simply
     turn the solid state relay control off if the target temperature has been
     achieved, or on otherwise.</li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Then:</p>

<p class=MsoNormal>&nbsp;</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>“save” saves the program to non-volatile flash memory.</li>
 <li class=MsoNormal>“autorun on” sets the program to run automatically when
     the MCU is powered up.</li>
 <li class=MsoNormal>Finally, “reset” resets the MCU as if it was just powered
     up.</li>
</ul>

<p class=MsoNormal>                                                                    </p>

<p class=MsoNormal>Note that if terse code were our goal, lines 60 and 130 thru
190 could have all been replaced with the single statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>60</span> <span class=ComputerentryChar>on timer 0 do let
relay = thermocouple&lt;target</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style=''>&nbsp;</span></span></p>

<b><i><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></i></b>

<h2><a name="_Toc306801244">2.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span>Embedded Systems Made Functional!</a></h2>

<p class=MsoNormal>With the advent of advanced serial peripherals based on the
I2C or QSPI serial interfaces, embedded systems can take on a whole new level
of real-world functionality!</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>An LCD digital thermometer, displaying both Celsius and
Fahrenheit, can be brought online in minutes, with just a quick study of the I2C
peripheral protocol definitions!  The peripherals are:</p>

<p class=MsoNormal>&nbsp;</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal><a
     href="http://focus.ti.com/docs/prod/folders/print/tmp102.html">Texas
     Instruments TMP102</a> temperature sensor, at I2C address 0x48</li>
 <li class=MsoNormal><a
     href="http://www.newhavendisplay.com/index.php?main_page=product_info&amp;cPath=315&amp;products_id=2411">NewHaven
     Display NHD-C0220BiZ-FS(RGB)-FBW-3VM</a> LCD display based on the ST7036
     controller, at I2C address 0x3c</li>
</ul>

<p class=MsoNormal style='margin-left:.5in'>&nbsp;</p>

<p class=MsoNormal><img width=442 height=230 src="stickos_files/image010.gif"></p>

<p class=MsoNormal><b><i>It’s as easy as...</i></b></p>

<p class=MsoNormal>&nbsp;</p>

<ol style='margin-top:0in' start=1 type=1>
 <li class=MsoNormal>wire MCU to its embedded circuit</li>
</ol>

<ol style='margin-top:0in' start=12 type=1>
 <ol style='margin-top:0in' start=1 type=a>
  <li class=MsoNormal>wire MCU pin scl to the temperature sensor, LCD display,
      and pull-up resistor</li>
  <li class=MsoNormal>wire MCU pin sda to the temperature sensor, LCD display,
      and pull-up resistor</li>
 </ol>
</ol>

<ol style='margin-top:0in' start=2 type=1>
 <li class=MsoNormal>connect a host computer to the USB interface on the MCU
     (see above)</li>
 <li class=MsoNormal>write and debug your BASIC control program, live on the
     MCU (see below)</li>
 <li class=MsoNormal>type “save”</li>
 <li class=MsoNormal>type “autorun on”</li>
 <li class=MsoNormal>type “run”</li>
</ol>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The entire LCD digital thermometer BASIC control program is
shown below:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><img border=0 width=574 height=665
src="stickos_files/image011.jpg"></p>

<p class=MsoNormal>&nbsp;</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>Line 10 declares four RAM variables: an integer to hold
     the current temperature in degrees C, two strings to represent the two
     lines of the display, and a third string used to blink an &quot;activity
     indicator&quot; on the display every two seconds.</li>
 <li class=MsoNormal>Line 20 initializes the activity indicator string to
     contain a space and an asterisk; these characters will be alternated on
     the right hand side of the second display line every other second.</li>
 <li class=MsoNormal>Line 30 initializes the LCD display by calling the
     &quot;initdisplay&quot; subroutine.</li>
 <li class=MsoNormal>Lines 40-100 are the main program loop:</li>
 <ul style='margin-top:0in' type=square>
  <li class=MsoNormal>first, we get the current temperature by calling the
      &quot;gettemp&quot; subroutine,</li>
  <li class=MsoNormal>then, we format a string for the first line of the
      display in degrees Celsius,</li>
  <li class=MsoNormal>then, we format a string for the second line of the
      display in degrees Fahrenheit, and include the activity indicator, and</li>
  <li class=MsoNormal>finally, we display both lines by calling the
      &quot;display&quot; subroutine.</li>
 </ul>
 <li class=MsoNormal>Lines 130-210 are the &quot;gettemp&quot; subroutine,
     which use the I2C protocol on the temperature sensor to extract degrees
     Celsius</li>
 <li class=MsoNormal>Lines 230-330 are the &quot;display&quot; subroutine,
     which use the I2C protocol on the LCD display to display two lines of text</li>
 <li class=MsoNormal>Lines 350-440 are the &quot;initdisplay&quot; subroutine,
     which use the I2C protocol to initialize the LCD display</li>
 <li class=MsoNormal>Line 450 is read-only data used by the
     &quot;initdisplay&quot; subroutine to initialize the LCD display.</li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Then:</p>

<p class=MsoNormal>&nbsp;</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>“save” saves the program to non-volatile flash memory.</li>
 <li class=MsoNormal>“autorun on” sets the program to run automatically when
     the MCU is powered up.</li>
 <li class=MsoNormal>Finally, “run” runs the program.</li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Here is the LCD digital thermometer in action:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><img border=0 width=1031 height=488
src="stickos_files/image012.jpg"></p>

<b><i><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></i></b>

<h2><a name="_Toc306801245">2.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span>Wireless Embedded Systems Made Just as Easy!</a></h2>

<p class=MsoNormal>With the aid of an MC13201 ZigFlea Wireless Transceiver, a
simple wireless embedded system, like a remote LED dimmer, can be brought
online just as easily as a local embedded system!</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><img width=432 height=264 src="stickos_files/image013.gif"></p>

<p class=MsoNormal><b><i>It’s as easy as...</i></b></p>

<p class=MsoNormal>&nbsp;</p>

<ol style='margin-top:0in' start=7 type=1>
 <li class=MsoNormal>set the 2.4GHz zigflea wireless nodeid on each MCU</li>
 <li class=MsoNormal>wire MCU #1 to its embedded circuit</li>
</ol>

<ol style='margin-top:0in' start=12 type=1>
 <ol style='margin-top:0in' start=3 type=a>
  <li class=MsoNormal>wire MCU #1 pin an0 to the potentiometer</li>
 </ol>
</ol>

<ol style='margin-top:0in' start=9 type=1>
 <li class=MsoNormal>wire MCU #2 to its embedded circuit</li>
 <ol style='margin-top:0in' start=1 type=a>
  <li class=MsoNormal>wire MCU #2 pin dtin0 to the LED</li>
 </ol>
 <li class=MsoNormal>connect a host computer to the USB interface on MCU #1
     (see above)</li>
 <li class=MsoNormal>write and debug your BASIC control program, live on MCU #1
     (see below)</li>
 <li class=MsoNormal>use the 2.4GHz zigflea wireless transport to connect to MCU
     #2</li>
 <li class=MsoNormal>write and debug your BASIC control program, live on MCU #2
     (see below)</li>
 <li class=MsoNormal>run the program on MCU #2</li>
 <li class=MsoNormal>disconnect from MCU #2</li>
 <li class=MsoNormal>run the program on MCU #1</li>
</ol>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal>The entire debugging session, including the writing and
running of both MCU’s BASIC control programs, is shown below:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><img border=0 width=575 height=501
src="stickos_files/image014.jpg"></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that all of this debugging session is occurring on the
Hyper Terminal connected to the USB interface on MCU #1!</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>First we write the program on MCU #1.</p>

<p class=MsoNormal>&nbsp;</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>Notice in line 10 that we declare a local pin variable
     named “<span style='font-family:"Courier New"'>potentiometer</span>” to
     read the value of the potentiometer, through analog input pin <i>an0</i>,
     in millivolts.</li>
 <li class=MsoNormal>Then, in line 20, we declare a <i>remote pin variable</i>
     to control the LED on MCU #2 (through MCU #2’s local pin variable!); the “<span
     style='font-family:"Courier New"'>as remote on nodeid 2</span>” indicates
     that the real variable declaration is found on MCU #2.</li>
 <li class=MsoNormal>Then we simply enter an infinite loop reading the value of
     the potentiometer (again, in millivolts) every 100ms, and writing it to
     the LED on MCU #2.</li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>We then save the program to flash memory on MCU #1 and
configure it to run automatically when the MCU powers up.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Then we remotely connect to MCU #2 and write its program.</p>

<p class=MsoNormal>&nbsp;</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>Notice in line 10 that we declare a local pin variable
     named “<span style='font-family:"Courier New"'>led</span>” to control the
     LED, through analog output pin <i>dtin0</i>, in millivolts.</li>
 <li class=MsoNormal>Then we simply enter an infinite loop, waiting for our
     local pin variable to be written remotely from MCU #1 every 100ms!</li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>We then save the program to flash memory on MCU #2 and
configure it to run automatically when the MCU powers up.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Finally, we run the program on MCU #2, disconnect from MCU
#2 by pressing <b><span style='font-family:"Courier New"'>&lt;Ctrl-D&gt;</span></b>,
and run the program on MCU #1.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>At this point, adjusting the potentiometer on MCU #1 causes
the LED brightness on MCU #2 to be correspondingly adjusted, after a 100ms
delay!!!</p>

<p class=MsoNormal>&nbsp;</p>

<b><i><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></i></b>

<h2><a name="_Toc306801246">2.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span>More Examples</a></h2>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801247"></a><a
name="_Digital_I/O_Example_1"></a>2.4.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span>Digital I/O Example</h3>

<p class=MsoNormal>As a simple example, the following BASIC program generates a
1 Hz square wave on the “dtin0” pin:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>10 dim square as pin dtin0 for digital output</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>20 while 1 do</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>30   let square = !square</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>40   sleep 500 ms</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>50 endwhile</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>run</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style=''>&lt;Ctrl-C&gt;</span></span></p>

<p class=Computer><span style=''>STOP at line 40!</span></p>

<p class=Computer><span style=''>&gt; _</span></p>

<p class=Computer>&nbsp;</p>

<p class=MsoNormal>Press <b><span style='font-family:"Courier New"'>&lt;Ctrl-C&gt;</span></b>
to stop the program.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Line 10 configures the “dtin0” pin for digital output, and
creates a variable named “square” whose updates are reflected at that pin. 
Line 20 starts an infinite loop (typically MCU programs run forever).  Line 30
inverts the state of the dtin0 pin from its previous state -- note that you can
examine as well as manipulate the (digital or analog or servo or frequency)
output pins.  Line 40 just delays the program execution for one half second. 
And finally line 50 ends the infinite loop.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If we want to run the program in a slightly more
demonstrative way, we can use the “trace on” command to show every executed
line and variable modification as it occurs:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>trace on</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>run</span></span></p>

<p class=Computer><span style=''>  10 dim square as pin dtin0
for digital output</span></p>

<p class=Computer><span style=''>  20 while 1 do</span></p>

<p class=Computer><span style=''>  30   let square = !square</span></p>

<p class=Computer><span style=''>    let square = 0</span></p>

<p class=Computer><span style=''>  40   sleep 500 ms</span></p>

<p class=Computer><span style=''>  50 endwhile</span></p>

<p class=Computer><span style=''>  20 while 1 do</span></p>

<p class=Computer><span style=''>  30   let square = !square</span></p>

<p class=Computer><span style=''>    let square = 1</span></p>

<p class=Computer><span style=''>  40   sleep 500 ms</span></p>

<p class=Computer><span style=''>  50 endwhile</span></p>

<p class=Computer><span style=''>  20 while 1 do</span></p>

<p class=Computer><span style=''>  30   let square = !square</span></p>

<p class=Computer><span style=''>    let square = 0</span></p>

<p class=Computer><span style=''>  40   sleep 500 ms</span></p>

<p class=Computer><span class=ComputerentryChar><span style=''>&lt;Ctrl-C&gt;</span></span></p>

<p class=Computer><span style=''>STOP at line 40!</span></p>

<p class=Computer><span style=''>&gt; <b>trace off</b></span></p>

<p class=Computer><span style=''>&gt; _</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Again, press <b><span style='font-family:"Courier New"'>&lt;Ctrl-C&gt;</span></b>
to stop the program.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that almost all statements that can be run in a program
can also be run in “immediate” mode, at the command prompt.  For example, after
having run the above program, the “square” variable (and dtin0 pin) remain
configured, so you can type:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>print &quot;square is now&quot;, square</span></span></p>

<p class=Computer><span style=''>square is now 0</span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>let square = !square</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>print &quot;square is now&quot;, square</span></span></p>

<p class=Computer><span style=''>square is now 1</span></p>

<p class=Computer><span style=''>&gt; _</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This also demonstrates how you can examine or manipulate
variables (or pins!) at the command prompt during program debug.</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_UART_I/O_Example"></a>2.4.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span> <a
name="_Toc306801248">Analog I/O Example</a></h3>

<p class=MsoNormal>The MCU can perform analog I/O as simply as digital I/O.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The following BASIC program takes a single measurement of an
analog input at pin “an0” and displays it:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>new</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>10 dim potentiometer as pin an0 for analog input</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>20 print &quot;potentiometer is&quot;, potentiometer</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>run</span></span></p>

<p class=Computer><span style=''>potentiometer is 2026</span></p>

<p class=Computer><span style=''>&gt; _</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that analog inputs and outputs are represented by
integers in units of millivolts (mV).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that almost all statements that can be run in a program
can also be run in “immediate” mode, at the command prompt.  For example, after
having run the above program, the “potentiometer” variable (and an0 pin) remain
configured, so you can type:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>print &quot;potentiometer is now&quot;, potentiometer</span></span></p>

<p class=Computer><span style=''>potentiometer is now 2027</span></p>

<p class=Computer><span style=''>&gt; _</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This also demonstrates how you can examine variables (or
pins!) at the command prompt during program debug.</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Frequency_I/O_Example"></a><a
name="_Servo_I/O_Example"></a><a name="_Toc306801249">2.4.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Servo I/O
Example</a></h3>

<p class=MsoNormal>The MCU can perform servo I/O as simply as digital or analog
I/O.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='color:red'>Please note that as of v1.84, the
units of servo output pins was changed from centi-milliseconds (cms) to
microseconds (us).</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The following program moves a servo on pin “dtin1” from one
extreme (assumed calibrated to a 0.5ms pulse) to the other (assumed calibrated
to a 2.5ms pulse) over the period of a second, using the default servo
frequency of 45Hz:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>new</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>servo</span></span></p>

<p class=Computer><span style=''>45</span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>10 dim loop</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>20 dim servo as pin dtin1 for servo output</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>30 for loop = 500 to 2500 step 10</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>40   let servo = loop</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='
font-weight:normal'>&gt; </span></span><span class=ComputerentryChar><span
style=''>50   sleep 50 ms</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='
font-weight:normal'>&gt; </span></span><span class=ComputerentryChar><span
style=''>60 next</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>run</span></span></p>

<p class=Computer><span style=''>&gt; _</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that servo outputs are represented by integers in units
of centi-milliseconds (cms, <span style='color:red'>v1.82-</span>) or
microseconds (us, <span style='color:red'>v1.84+</span>), so we’re generating
pulses at 45Hz, and they start at 0.5ms and increase to 2.5ms.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In the example above, we use a separate &quot;<span
class=ComputerentryChar><span style=''>loop</span></span>&quot;
variable, since reading a pin variable returns the actual value of the pin,
which may not be exactly what you set (due to rounding); this avoids rounding
error accumulation that would otherwise occur.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that almost all statements that can be run in a program
can also be run in “immediate” mode, at the command prompt.  For example, after
having run the above program, the “servo” variable (and dtin1 pin) remain
configured, so you can type the following to return the servo to the other
extreme position:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>let servo = 500</span></span></p>

<p class=Computer><span style=''>&gt; _</span></p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Frequency_I/O_Example_"></a><a
name="_Toc306801250">2.4.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span>Frequency I/O Example</a></h3>

<p class=MsoNormal>The MCU can perform frequency I/O as simply as digital or
analog I/O.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The following BASIC program generates a 1kHz square wave on
a frequency output pin “dtin0” for 1 second:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>new</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>10 dim audio as pin dtin0 for frequency output</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>20 let audio = 1000</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='
font-weight:normal'>&gt; </span></span><span class=ComputerentryChar><span
style=''>30 sleep 1 s</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='
font-weight:normal'>&gt; </span></span><span class=ComputerentryChar><span
style=''>40 let audio = 0</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>run</span></span></p>

<p class=Computer><span style=''>&gt; _</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that frequency outputs are represented by integers in
units of hertz (Hz).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that almost all statements that can be run in a program
can also be run in “immediate” mode, at the command prompt.  For example, after
having run the above program, the “audio” variable (and dtin0 pin) remain
configured, so you can type:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>print &quot;audio is now&quot;, audio</span></span></p>

<p class=Computer><span style=''>audio is now 0</span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>let audio = 2000</span></span></p>

<p class=Computer><span style=''>&gt; <span
class=ComputerentryChar>print &quot;audio is now&quot;, audio</span></span></p>

<p class=Computer><span style=''>audio is now 2000</span></p>

<p class=Computer><span style=''>&gt; _</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This also demonstrates how you can examine or manipulate
variables (or pins!) at the command prompt during program debug.</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_UART_I/O_Example_"></a>2.4.5<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span> <a
name="_Toc306801251">UART I/O Example</a></h3>

<p class=MsoNormal>The MCU can perform serial uart I/O as simply as digital or
analog I/O.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The following BASIC program configures a uart for loopback
mode, transmits two characters and then asserts it receives them correctly:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer>&gt; <span class=ComputerentryChar>new</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>10 configure uart 0 for
9600 baud 7 data even parity loopback</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>20 dim tx as pin utxd0 for
uart output</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>30 dim rx as pin urxd0 for
uart input</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>40 let tx = 48</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>50 let tx = 49</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>60 while tx do</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>70 endwhile</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>80 assert rx==48</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>90 assert rx==49</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>100 assert rx==0</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>110 print &quot;ok!&quot;</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>run</span></p>

<p class=Computer>ok!</p>

<p class=Computer>&gt; _</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Line 10 configures uart 0 for 9600 baud loopback operation. 
Lines 20 and 30 configure the “utxd0” and “urxd0” pins for uart output and
input, and creates two variable named “tx” and “rx” bound to those pins.  Line
40 sends a character (‘0’, ASCII 48) out the uart and line 50 sends another
(‘1’, ASCII 49).  Line 60 waits until all characters are sent (when “tx” reads
back 0).  Line 80 and 90 then receive two characters from the uart and assert
they are what we sent.  Line 100 then asserts there are no more characters
received (“rx” reads back 0).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The uart can also be controlled using interrupts rather than
polling.  The following program shows this:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer>&gt; <span class=ComputerentryChar>10 configure uart 0 for
9600 baud 7 data even parity loopback</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>20 dim tx as pin utxd0 for
uart output</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>30 dim rx as pin urxd0 for
uart input</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>40 on uart 0 input do print
&quot;received&quot;, rx</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>50 let tx = 48, tx=49</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>60 sleep 1 s</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>run</span></p>

<p class=Computer>received 48</p>

<p class=Computer>received 49</p>

<p class=Computer>&gt; _</p>

<p class=Computer>&nbsp;</p>

<p class=MsoNormal><i>Please note the pin variable method of accessing UART I/O
should not be used on PIC32; see <a href="#_UART_I/O">below</a>.</i></p>

<p class=Computer>&nbsp;</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Analog_I/O_Example"></a><a
name="_QSPI_I/O_Example"></a><a name="_QSPI_Master_I/O"></a><a
name="_I2C_Master_I/O"></a><a name="_Toc306801252">2.4.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span>I2C Master I/O Example</a></h3>

<p class=MsoNormal>The MCU can perform serial I2C master I/O as simply as
digital or analog I/O.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The following BASIC program configures I2C to talk to a TI
TMP102 temperature sensor at address 0x48.  It displays the current
temperature, in degrees Celsius:</p>

<p class=MsoNormal align=right style='text-align:right'>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>list</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  10
dim r as byte, t[2] as byte</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  20
let r = 0</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  30
i2c start 0x48</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  40
i2c write r</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  50
i2c read t</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  60
i2c stop</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  70
print t[0]</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>end</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>run</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>25</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
_</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal>Line 10 just dimensions a byte sized variable for the i2c
command and a 2-byte sized array for the response; note that I2C transfers are
sized by the variables specified in the i2c statement.  Line 20 sets the
command byte to 0.  Line 30 starts the i2c transaction to the temperature
sensor at address 0x48.  Line 40 sends the command and line 50 reads the
response.  Line 60 completes the i2c transaction.  Finally, line 70 prints the
temperature, in degrees Celsius.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that i2c statements can also be run in immediate mode,
allowing you to interactively discover the way your i2c peripherals work!!!</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_QSPI_Master_I/O_1"></a><a
name="_Toc306801253">2.4.7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span>QSPI Master I/O Example</a></h3>

<p class=MsoNormal>The MCU can perform serial QSPI master I/O as simply as
digital or analog I/O.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The following BASIC program configures QSPI to talk to the
EzPort of another MCU via QSPI, assuming a clone cable is attached.  It enables
flash memory writes and then queries the status register:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>list</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  10
dim nrsti as pin scl for digital output</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  20
dim ncs as pin qspi_cs0 for digital output</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  30
dim cmd as byte, status as byte</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  40
rem pulse rsti* low with cs*</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  50
let ncs = 0, nrsti = 0, nrsti = 1</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  60
sleep 100 ms</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  70
let ncs = 1</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  80
rem send write enable command</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  90
let cmd = 0x6</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'> 100
let ncs = 0</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'> 110
qspi cmd</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'> 120
let ncs = 1</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'> 130
rem send read status register command</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'> 140
let cmd = 0x5</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'> 150
let ncs = 0</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'> 160
qspi cmd, status</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'> 170
let ncs = 1</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'> 180
print hex status</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>end</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>run</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>0x2</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
_</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal>Line 10 configures a digital output pin to reset the target
MCU.  Line 20 configures a digital output pin to drive the MCU chip select, for
use with EzPort.  Line 30 just dimensions two byte sized variables for use
below; note that QSPI transfers are sized by the variables specified in the
qspi statement.  Lines 40 thru 70 reset the target MCU.  Lines 80 thru 120 send
a one byte “write enable” command, with chip select.  Lines 130 thru 170 send a
one byte “read status register” command and receive a one byte status, with
chip select.  Line 180 prints the status, which shows writes are enabled but
the configuration register is not yet loaded.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that qspi statements can also be run in immediate mode,
allowing you to interactively discover the way your qspi peripherals work!!!</p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h1><a name="_Toc306801254">3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>MCU Connections</a></h1>

<h2><a name="_Toc306801255">3.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span>Interface</a></h2>

<p class=MsoNormal>When the StickOS is running the “heartbeat” LED will blink
slowly; when the BASIC program in the MCU is running, the “heartbeat” LED will
blink quickly.  </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Holding the “autorun disable” switch depressed during
power-on prevents autorun of the BASIC program.  It also disables
&quot;usbhost&quot; mode (enabling CDC/ACM device mode), resets the serial
console baud rate to 9600 baud, and overrides static IP address assignment in
favor of DHCP, in an effort to allow you to regain control of the MCU.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Use the <b><span style='font-family:"Courier New"'>help pins</span></b>
command to see the list of MCU pin names, and the <b><span style='font-family:
"Courier New"'>pins</span></b> command to see their LED and switch assignments.</p>

<h2><a name="_Toc306801256">3.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span>External Pins</a></h2>

<p class=MsoNormal>All MCU external pins support general purpose digital input
or output.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In addition, certain external pins can support analog input,
analog output (PWM actually), frequency output, UART input, UART output, I2C
master input/output, and/or QSPI master input/output.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Use the <b><span style='font-family:"Courier New"'>help pins</span></b>
command to see the list of MCU pin names and their capabilities.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<span class=Heading2Char><span style=''><br clear=all
style='page-break-before:always'>
</span></span>

<h2><a name="_Toc306801257">3.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span><span class=Heading2Char>Command-Line Transports</span></a></h2>

<p class=MsoNormal>StickOS is controlled via a terminal emulator program, such
as Windows Hyper Terminal (typically found under Start -&gt; All Programs -&gt;
Accessories -&gt; Communications -&gt; Hyper Terminal), thru one of the
following command-line transports:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:28.35pt;text-indent:-14.15pt'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>USB, via a CDC/ACM Virtual COM port</p>

<p class=MsoNormal style='margin-left:28.35pt;text-indent:-14.15pt'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Ethernet, via a raw socket on port 1234</p>

<p class=MsoNormal style='margin-left:28.35pt;text-indent:-14.15pt'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>UART, via a physical COM port</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When using Hyper Terminal, if the USB or Ethernet connection
is lost (such as when you unplug and re-plug in the MCU), press the
“Disconnect” button followed by the “Call” button, to reconnect Hyper Terminal.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that if you do not have Hyper Terminal (the XP version
runs fine on Windows 7, BTW), my favorite terminal emulator program is “Tera
Term”, available free from <a href="http://logmett.com/">http://logmett.com/</a>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>On Mac you can also just use the &quot;screen&quot; command
under Terminal.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>On Linux &quot;minicom&quot; works from <a
href="http://alioth.debian.org/projects/minicom/">http://alioth.debian.org/projects/minicom/</a>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b><i>Note that as of Windows 7, I experience USB hangs with
putty when typing or pasting text into the terminal emulator. </i></b> This
appears to be a putty issue, as I experience the exact same hangs when talking
to an FTDI chip, a physical serial port, or multiple CDC/ACM serial ports, and
I don't experience the hangs with Hyper Terminal, SecureCRT, or Tera Term.  If
you experience these hangs, I suggest you try Tera Term, available free from <a
href="http://logmett.com/">http://logmett.com/</a>.</p>

<span class=Heading2Char><span style=''><br clear=all
style='page-break-before:always'>
</span></span>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801258"><span
class=Heading2Char><span style='font-style:normal'>3.3.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><span class=Heading2Char><span style='font-style:normal'>USB
Transport</span></span></a></h3>

<h4>Windows</h4>

<p class=MsoNormal>Before connecting the MCU to a Windows USB host computer, install
the <a href="#_cpustick.inf_file">cpustick.inf</a> file by saving it to a file,
right-clicking on the file, and selecting &quot;Install&quot;; you can ignore
warnings about an unsigned driver package -- the driver is straight from
Microsoft, and only the INF file itself is unsigned.  The INF file allows
Windows to bind a human readable name, &quot;CPUStick&quot;, to the USB VID/PID
presented to the host by StickOS.  The latest version of the cpustick.inf file
can always be found at: <a href="https://github.com/rtestardi/StickOS/cpustick.inf">https://github.com/rtestardi/StickOS/cpustick.inf</a></p>

<h4><a name="_cpustick.inf_file"></a>cpustick.inf file</h4>

<p class=MsoNormal><img width=428 height=364 src="stickos_files/image015.gif"></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When the MCU is then connected to the USB host computer, it
will present a CDC/ACM Serial Port function to the host computer.  An
appropriate driver (usbser.sys) will be loaded automatically from
microsoft.com, if needed.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Please note one Windows peculiarity with usbser.sys and
CDC/ACM Serial Port functions...  If you have the virtual COM port held open by
an application (such as a terminal emulator) and then disconnect and reconnect
the MCU from the USB, when Windows re-creates the virtual COM port, it will not
re-create the \DosDevices symbolic link, leaving the new (i.e., working!)
virtual COM port inaccessible.  To avoid this, close all applications using the
virtual COM port before disconnecting and reconnecting the MCU from the USB (or
close them after and then disconnect and reconnect the MCU from the USB again).</p>

<p class=MsoNormal><span style='color:red'>&nbsp;</span></p>

<p class=MsoNormal>Once the driver is loaded, a new virtual COM port (VCP) will
be present on your system.  This virtual COM port will be visible in Device
Manager with the &quot;CPUStick&quot; human readable name:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><img border=0 width=639 height=451
src="stickos_files/image016.jpg"></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>At this point you can use Hyper Terminal to connect to the
new virtual COM port.  Specify a new connection name, such as “CPUStick CDC”,
and then select the new virtual COM port under Connect Using; the baud rate and
data characteristics in Port Settings are ignored.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Continue reading <a href="#_All">here</a>.</p>

<h4>Mac</h4>

<p class=MsoNormal>When the MCU is connected to the USB host computer, it will
present a CDC/ACM Serial Port function to the host computer.  An appropriate
driver will be loaded.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Once the driver is loaded, a new virtual COM port (VCP) will
be present on your system.  This virtual COM port will be visible in About This
Mac -&gt; More Info... -&gt; Hardware -&gt; USB -&gt; USB Bus with the
&quot;CPUStick&quot; human readable name:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><img border=0 width=906 height=670
src="stickos_files/image017.gif"></p>

<p class=MsoNormal>Note the &quot;Location ID&quot; above.</p>

<p class=MsoNormal>&nbsp;</p>

<span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal>At this point you can use the Terminal program with the
&quot;screen&quot; command to connect to the new virtual COM port.  Specify a
new connection name, such as “CPUStick CDC”, and then enter the
&quot;screen&quot; command and the new virtual COM port under &quot;Run
command&quot;; the baud rate and data characteristics are ignored.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><img border=0 width=893 height=715
src="stickos_files/image018.gif"></p>

<p class=MsoNormal>Continue reading <a href="#_All">here</a>.</p>

<b><span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h4>Linux</h4>

<h4><span style='font-weight:normal'>Unfortunately, it seems
distributions are different naming their device files.  On mine, the dev file is
very easy to find -- it has the name ACM in it, like /dev/ttyACM0 -- that is
because StickOS presents a CDC/ACM function.  The actual number will likely
depend on the exact physical USB port you use.</span></h4>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>At this point you can use &quot;minicom&quot; to connect to
the new virtual COM port.  &quot;&lt;Ctrl-A&gt;Z&quot; gets you to a help
screen, and &quot;OA&quot; allows you to specify the serial device file; the
baud rate and data characteristics are ignored.</p>

<p class=MsoNormal>&nbsp;</p>

<h4><img border=0 width=929 height=658 src="stickos_files/image019.jpg"></h4>

<p class=MsoNormal>Continue reading <a href="#_All">here</a>.</p>

<span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span>

<h4><span style='font-weight:normal'>&nbsp;</span></h4>

<h4><a name="_All"></a>All</h4>

<p class=MsoNormal>Press <b><span style='font-family:"Courier New"'>&lt;Enter&gt;</span></b>
when you are connected and you should see the command prompt:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><img border=0 width=528 height=237
src="stickos_files/image020.jpg"></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You are now ready to enter StickOS commands and/or BASIC
program statements!</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801259">3.3.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>USB Host Mode</a></h3>

<p class=MsoNormal>If a UART Transport is used, the USB interface on selected
MCUs can be configured into host mode to create a trivial USB data logging
mechanism to an external USB flash drive.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The state of USB Host mode can be displayed (along with
whether a USB flash drive is attached or not), turned on, or turned off with
the commands:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>      usbhost</span></b></p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>      usbhost
on</span></b></p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>      usbhost
off</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This takes effect after the next MCU reset.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You can override the &quot;usbhost&quot; mode and revert to
device mode by holding the “autorun disable” switch depressed during power-on.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When USB host mode is turned on and an external USB flash
drive is attached and supplied with appropriate VBUS power, all StickOS “print”
statement output will be appended to the file <span style='font-family:"Courier New"'>x:\stickos.log</span>
in the USB flash drive, where <span style='font-family:"Courier New"'>x:</span>
is your drive letter.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The write-back cache is flushed every second, so you must
wait one second after the last “print” statement before disconnecting the
external USB flash drive.</p>

<h3> </h3>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801260">3.3.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>UART Transport</a></h3>

<p class=MsoNormal>Find the physical COM port in Device Manager:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><img border=0 width=639 height=451
src="stickos_files/image021.jpg"></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>At this point you can use Hyper Terminal to connect to the
physical COM port.  Specify a new connection name, such as “cpustick”, and then
select the physical COM port under Connect Using; set the baud rate and data
characteristics in Port Settings to:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Bits per second:  9600</p>

<p class=MsoNormal>Data bits:           8</p>

<p class=MsoNormal>Parity:               None</p>

<p class=MsoNormal>Stop bits:           2</p>

<p class=MsoNormal>Flow control:     Xon/Xoff</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Press <b><span style='font-family:"Courier New"'>&lt;Enter&gt;</span></b>
when you are connected and you should see the command prompt:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><img border=0 width=528 height=237
src="stickos_files/image020.jpg"></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You are now ready to enter StickOS commands and/or BASIC
program statements!</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The UART baud rate can be displayed or changed persistent
with the commands:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>      baud</span></b></p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>      baud
</span></b><i><span style='font-family:"Courier New"'>rate</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This takes effect after the next MCU reset.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You can override the changed baud rate and revert to 9600
baud by holding the “autorun disable” switch depressed during power-on.</p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801261">3.3.4<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Ethernet
Transport</a></h3>

<p class=MsoNormal>The MCU will acquire an IP address from DHCP (query your
DHCP server to figure out which IP address it got).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>At this point you can use Hyper Terminal to connect to the
new IP address on TCP port 1234.  Specify a new connection name, such as
“52233”, and then specify “TCP/IP” under Connect Using; then specify the new IP
address as Host address and 1234 as Port number.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Press <b><span style='font-family:"Courier New"'>&lt;Enter&gt;</span></b>
when you are connected and you should see the command prompt:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><img border=0 width=523 height=236
src="stickos_files/image022.jpg"></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You are now ready to enter StickOS commands and/or BASIC
program statements!</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You can subsequently use the &quot;ipaddress&quot; command
to set a static IP address persistently.  This takes effect after the next MCU
reset.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You can override the static IP address and revert to DHCP by
holding the “autorun disable” switch depressed during power-on.</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h1><a name="_Toc306801262">4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>StickOS</a></h1>

<p class=MsoNormal>StickOS supports a BASIC programming environment with integer
variable/array and string support and block structured programming and
subroutine support, where external pins are bound to special “pin variables”
for manipulation or examination.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>External pins can be dynamically configured as one of:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>digital input or output,</p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>analog input or output (PWM actually),</p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>servo output,</p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>frequency output,</p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>uart input or output,</p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>i2c master input/output, or</p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>qspi master input/output</p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>4-bit HD44780-compatible LCD output</p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span>4x4 scanned keypad input</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>BASIC programs as well as “persistent parameters” can be
stored in non-volatile flash memory; volatile variables as well as recent code
edits (up to the next “save” command) are stored in RAM.</p>

<b><i><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></i></b>

<h2><a name="_Toc306801263">4.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span>First Boot &amp; Pin Assignments</a></h2>

<p class=MsoNormal>When StickOS first boots, certain pin assignments default to
“standard” board layouts.  Since StickOS runs on any MCU, independent of its
board layout, you may need to customize these pin assignments when you first
log in if your board is different.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The following pin assignments are supported:</p>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='margin-left:.25in;border-collapse:collapse;border:none'>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:none;border-bottom:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><i><span style='font-family:"Courier New"'>assign</span></i></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border:none;border-bottom:
  solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>function</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>heartbeat</span></b></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>indicates the position of the pin attached to the “heartbeat”
  LED (digital output).</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>safemode*</span></b></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>indicates the position of the safemode pin attached to the
  “autorun disable” switch (digital input).</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>qspi_cs*</span></b></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>indicates the position of the cs* pin used for QSPI
  transfers for clone and zigflea operations.</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>clone_rst*</span></b></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>indicates the position of the rst* pin used when cloning
  firmware to another MCU via EzPort (digital output)</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>zigflea_rst*</span></b></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>indicates the position of the rst* pin used to reset the
  MC1320x ZigFlea Transceiver (digital output)</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>zigflea_attn*</span></b></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>indicates the position of the attn* pin used to wake the
  MC1320x ZigFlea Transceiver (digital output)</p>
  <p class=MsoNormal>&nbsp;</p>
  <p class=MsoNormal>Note that this signal is only needed if the MC1320x
  circuit uses it; StickOS does not need it</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>zigflea_rxtxen</span></b></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>indicates the position of the rxtxen pin used to activate
  the MC1320x ZigFlea Transceiver (digital output)</p>
  </td>
 </tr>
</table>

<span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='margin-left:.25in;border-collapse:collapse;border:none'>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>lcd_d4
  </span></b><span style='color:red'>(v1.82+)</span></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>HD44780-compatible LCD data bit (lsb)</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>lcd_d5
  </span></b><span style='color:red'>(v1.82+)</span></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>HD44780-compatible LCD data bit</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>lcd_d6
  </span></b><span style='color:red'>(v1.82+)</span></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>HD44780-compatible LCD data bit</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>lcd_d7
  </span></b><span style='color:red'>(v1.82+)</span></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>HD44780-compatible LCD data bit (msb)</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>lcd_en
  </span></b><span style='color:red'>(v1.82+)</span></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>HD44780-compatible LCD enable</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>lcd_rs
  </span></b><span style='color:red'>(v1.82+)</span></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>HD44780-compatible LCD register select</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>kbd_s0
  </span></b><span style='color:red'>(v1.82+)</span></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>4x4 scanned keypad scan line (lsb)</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>kbd_s1
  </span></b><span style='color:red'>(v1.82+)</span></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>4x4 scanned keypad scan line</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>kbd_s2
  </span></b><span style='color:red'>(v1.82+)</span></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>4x4 scanned keypad scan line</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>kbd_s3
  </span></b><span style='color:red'>(v1.82+)</span></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>4x4 scanned keypad scan line (msb)</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>kbd_r0
  </span></b><span style='color:red'>(v1.82+)</span></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>4x4 scanned keypad return line (lsb)</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>kbd_r1
  </span></b><span style='color:red'>(v1.82+)</span></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>4x4 scanned keypad return line</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>kbd_r2
  </span></b><span style='color:red'>(v1.82+)</span></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>4x4 scanned keypad return line</p>
  </td>
 </tr>
 <tr>
  <td width=126 valign=top style='width:94.85pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>kbd_r3
  </span></b><span style='color:red'>(v1.82+)</span></p>
  </td>
  <td width=273 valign=top style='width:204.55pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>4x4 scanned keypad return line (msb)</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The default pin assignments may be displayed with the
command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry><span style=''>      pins</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>An individual pin assignment may be displayed with the
command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>      pins
</span></b><i><span style='font-family:"Courier New"'>assign</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>An individual pin may be reassigned persistently in flash
with the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>      pins
</span></b><i><span style='font-family:"Courier New"'>assign</span></i><b><span
style='font-family:"Courier New"'> none</span></b></p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>      pins
</span></b><i><span style='font-family:"Courier New"'>assign</span></i><b><span
style='font-family:"Courier New"'> </span></b><i><span
style='font-family:"Courier New"'>pinname</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Use the following command to see a list of pin names for the
MCU:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>      help
pins</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h4>Examples</h4>

<p class=Computer><span style=''>&gt; <b>help pins</b></span></p>

<p class=Computer><span style=''>pin names:</span></p>

<p class=Computer><span style=''>    0         1        
2         3        4     5        6        7</span></p>

<p class=Computer><span style=''>  --------  --------- ---------
-------- ----- -------- -------- ------+</span></p>

<p class=Computer><span style=''>  an0       an1       an2      
an3      an4   an5      an6      an7   | AN</span></p>

<p class=Computer><span style=''>  scl      
sda                                                        | AS</span></p>

<p class=Computer><span style=''>           
irq1*                        irq4*                   irq7* | NQ</span></p>

<p class=Computer><span style=''>  qspi_dout qspi_din  qspi_clk 
qspi_cs0       qspi_cs2 qspi_cs3       | QS</span></p>

<p class=Computer><span style=''>  dtin0     dtin1     dtin2    
dtin3                                  | TC</span></p>

<p class=Computer><span style=''>  utxd0     urxd0     urts0*   
ucts0*                                 | UA</span></p>

<p class=Computer><span style=''>  utxd1     urxd1     urts1*   
ucts1*                                 | UB</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>all pins support general
purpose digital input/output</span></p>

<p class=Computer><span style=''>an? = potential analog input
pins (mV)</span></p>

<p class=Computer><span style=''>dtin? = potential analog output
(PWM) pins (mV)</span></p>

<p class=Computer><span style=''>dtin? = potential servo output
(PWM) pins (us)</span></p>

<p class=Computer><span style=''>dtin? = potential frequency
output pins (Hz)</span></p>

<p class=Computer><span style=''>urxd? = potential uart input
pins (received byte)</span></p>

<p class=Computer><span style=''>utxd? = potential uart output
pins (transmit byte)</span></p>

<p class=Computer><span style=''>&gt; <b>pins</b></span></p>

<p class=Computer><span style=''>heartbeat dtin3</span></p>

<p class=Computer><span style=''>safemode* irq1*</span></p>

<p class=Computer><span style=''>qspi_cs* qspi_cs0</span></p>

<p class=Computer><span style=''>clone_rst* scl</span></p>

<p class=Computer><span style=''>zigflea_rst* an2</span></p>

<p class=Computer><span style=''>zigflea_attn* an3</span></p>

<p class=Computer><span style=''>zigflea_rxtxen an5</span></p>

<p class=Computer><span style=''>&gt; <b>pins heartbeat dtin2</b></span></p>

<p class=Computer><span style=''>&gt; <b>pins heartbeat</b></span></p>

<p class=Computer><span style=''>dtin2</span></p>

<p class=Computer><span style=''>&gt; _</span></p>

<b><i><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></i></b>

<h2><a name="_Toc306801264">4.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span>Command-Line</a></h2>

<p class=MsoNormal>In the command and statement specifications that follow, the
following nomenclatures are used:</p>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='margin-left:.5in;border-collapse:collapse'>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=Computerentry>bold</p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>literal text; enter exactly as shown</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=Computerparameter>italics</p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>parameterized text; enter actual parameter value</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='font-family:"Courier New"'>(<b>alternate1</b>|</span></p>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'> alternate2</span></b><span
  style='font-family:"Courier New"'>|</span></p>
  <p class=MsoNormal><span style='font-family:"Courier New"'> ...)</span></p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>alternated text; enter exactly one alternate value</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=Computer>regular</p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>displayed by StickOS</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=Computer><b>&lt;key&gt;</b></p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>press this key</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To avoid confusion with array indices (specified by <b>[</b>...<b>]</b>),
optional text will always be called out explicitly, either by example or by
text, rather than nomenclated with the traditional [...].</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When StickOS is controlled with an ansi or vt100'ish
terminal emulator, command-line editing is enabled via the terminal keys, as
follows:</p>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='margin-left:.5in;border-collapse:collapse'>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>key</b></p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>function</b></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>&#8592;</p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>move cursor left</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>&#8594;</p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>move cursor right</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>&#8593;</p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>recall previous history line</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>&#8595;</p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>recall next history line</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=Computerentry>&lt;Home&gt;</p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>move cursor to start of line</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=Computerentry>&lt;End&gt;</p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>move cursor to end of line</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=Computerentry>&lt;Backspace&gt;</p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>delete character before cursor</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=Computerentry>&lt;Delete&gt;</p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>delete character at cursor</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=Computerentry>&lt;Ctrl-C&gt;</p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>clear line (also stops running program)</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=Computerentry>&lt;Ctrl-D&gt;</p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>disconnect from remote node (zigflea)</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=Computerentry>&lt;Enter&gt;</p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>enter line to StickOS</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If you enter a command or statement in error, StickOS will
indicate the position of the error, such as:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>print i forgot to use quotes</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>error
-   ^</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
_</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Digital_I/O_Example"></a>4.2.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span> <a
name="_Toc306801265">StickOS Commands</a></h3>

<p class=MsoNormal>StickOS commands are used to control the StickOS BASIC
program.  Unlike BASIC program statements, StickOS commands cannot be entered
into the StickOS BASIC program with a line number.</p>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801266">4.2.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Getting Help</a></h3>

<p class=MsoNormal>The help command displays the top level list of help topics:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>help</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To get help on a subtopic, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>help</span></span><span style=''> <span
class=ComputerparameterChar>subtopic</span></span></p>

<b><span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h4>Examples</h4>

<p class=Computer><span style=''>&gt; <b>help</b> </span></p>

<p class=Computer><span style=''>for more information:</span></p>

<p class=Computer><span style=''>  help about</span></p>

<p class=Computer><span style=''>  help commands</span></p>

<p class=Computer><span style=''>  help modes</span></p>

<p class=Computer><span style=''>  help statements</span></p>

<p class=Computer><span style=''>  help blocks</span></p>

<p class=Computer><span style=''>  help devices</span></p>

<p class=Computer><span style=''>  help expressions</span></p>

<p class=Computer><span style=''>  help strings</span></p>

<p class=Computer><span style=''>  help variables</span></p>

<p class=Computer><span style=''>  help pins</span></p>

<p class=Computer><span style=''>  help clone</span></p>

<p class=Computer><span style=''>  help zigflea</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>see also:</span></p>

<p class=Computer><span style=''>  https://github.com/rtestardi/StickOS</span></p>

<p class=Computer><span style=''>&gt; <b>help commands</b></span></p>

<p class=Computer><span style=''>&lt;Ctrl-C&gt;                     
-- stop program</span></p>

<p class=Computer><span style=''>auto
&lt;line&gt;                   -- automatically number program lines</span></p>

<p class=Computer><span style=''>clear [flash]                
-- clear ram [and flash] variables</span></p>

<p class=Computer><span style=''>cls                          
-- clear terminal screen</span></p>

<p class=Computer><span style=''>cont
[&lt;line&gt;]                 -- continue program from stop</span></p>

<p class=Computer><span style=''>delete
([&lt;line&gt;][-][&lt;line&gt;]|&lt;subname&gt;) -- delete program lines</span></p>

<p class=Computer><span style=''>download &lt;slave
Hz&gt;           -- download flash to slave MCU</span></p>

<p class=Computer><span style=''>dir                          
-- list saved programs</span></p>

<p class=Computer><span style=''>edit
&lt;line&gt;                   -- edit program line</span></p>

<p class=Computer><span style=''>help
[&lt;topic&gt;]                -- online help</span></p>

<p class=Computer><span style=''>list
([&lt;line&gt;][-][&lt;line&gt;]|&lt;subname&gt;) -- list program lines</span></p>

<p class=Computer><span style=''>load
&lt;name&gt;                   -- load saved program</span></p>

<p class=Computer><span style=''>memory                       
-- print memory usage</span></p>

<p class=Computer><span style=''>new                          
-- erase code ram and flash memories</span></p>

<p class=Computer><span style=''>profile
([&lt;line&gt;][-][&lt;line&gt;]|&lt;subname&gt;) -- display profile info</span></p>

<p class=Computer><span style=''>purge
&lt;name&gt;                  -- purge saved program</span></p>

<p class=Computer><span style=''>renumber
[&lt;line&gt;]             -- renumber program lines (and save)</span></p>

<p class=Computer><span style=''>reset                        
-- reset the MCU!</span></p>

<p class=Computer><span style=''>run
[&lt;line&gt;]                  -- run program</span></p>

<p class=Computer><span style=''>save [&lt;name&gt;|library]        
-- save code ram to flash memory</span></p>

<p class=Computer><span style=''>subs                         
-- list sub names</span></p>

<p class=Computer><span style=''>undo                         
-- undo code changes since last save</span></p>

<p class=Computer><span style=''>upgrade                      
-- upgrade StickOS firmware!</span></p>

<p class=Computer><span style=''>uptime                       
-- print time since last reset</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>for more information:</span></p>

<p class=Computer><span style=''>  help modes</span></p>

<p class=Computer><span style=''>&gt; _</span></p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801267">4.2.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Entering Programs</a></h3>

<p class=MsoNormal>To enter a statement into the BASIC program, precede it with
a line number identifying its position in the program:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerparameter style='margin-left:.5in'><span style=''>line statement</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If the specified line already exists in the BASIC program,
it is overwritten.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To delete a statement from the BASIC program, enter just its
line number:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerparameter style='margin-left:.5in'><span style=''>line</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To edit an existing line of the BASIC program via
command-line editing, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer><span style=''>      <b>edit</b> <i>line</i></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A copy of the unchanged line is also stored in the history
buffer.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that statements are initially entered into a RAM buffer
to avoid excessive writes to flash memory, and therefore can be lost if the MCU
is reset or loses power before the program has been saved.  When a program is
run, the (newly edited) statements in RAM are seamlessly merged with the (previously
saved) statements in flash memory, to give the appearance of a single “current
program”, at a slight performance penalty.  When the newly edited program is
subsequently saved again, the merged program is re-written to flash and the RAM
buffer is cleared, resulting in maximum program performance.  If the RAM buffer
fills during program entry, an “auto save” is performed to accelerate the
merging process.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To automatically number program lines as you enter them, use
the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry><span style=''>      auto</span></p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>auto</span></span><span style=''> <span
class=ComputerparameterChar>line</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Enter two blank lines to terminate automatic line numbering.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that you can edit a BASIC program in a text editor,
without line numbers, and then paste it into the terminal emulator window with
automatic line numbering, and then enter two blank lines to terminate automatic
line numbering.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To list the BASIC program, or a range of lines from the
BASIC program, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry><span style=''>      list</span></p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>list</span></span><span style=''> <span
class=ComputerparameterChar>line</span></span></p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>list</span></span><span style=''> <span
class=ComputerentryChar>-</span><span class=ComputerparameterChar>line</span></span></p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>list</span></span><span style=''> <span
class=ComputerparameterChar>line</span><span class=ComputerentryChar>-</span></span></p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>list</span></span><span style=''> <span
class=ComputerparameterChar>line</span><span class=ComputerentryChar>-</span><span
class=ComputerparameterChar>line</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Alternately, you can list an entire subroutine by name with
the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>list</span></span><span style=''> <span
class=ComputerparameterChar>subname</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To set the listing indent mode, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>indent</span></span><span style=''> (<span
class=ComputerentryChar>on</span>|<span class=ComputerentryChar>off</span>)</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To display the listing indent mode, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>indent</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If the listing indent mode is on, nested statements within a
block will be indented by two characters, to improve program readability.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To set the line numbering mode, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>numbers</span></span><span style=''> (<span
class=ComputerentryChar>on</span>|<span class=ComputerentryChar>off</span>)</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To display the line numbering mode, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>numbers</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that unnumbered listings are useful to paste back in to
the “auto” command which automatically supplies line numbers to program
statements.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To delete a range of lines from the BASIC program, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>delete</span></span><span style=''> <span
class=ComputerparameterChar>line</span></span></p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>delete</span></span><span style=''> <span
class=ComputerentryChar>-</span><span class=ComputerparameterChar>line</span></span></p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>delete</span></span><span style=''> <span
class=ComputerparameterChar>line</span><span class=ComputerentryChar>-</span></span></p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>delete</span></span><span style=''> <span
class=ComputerparameterChar>line</span><span class=ComputerentryChar>-</span><span
class=ComputerparameterChar>line</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Alternately, you can delete an entire subroutine by name
with the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>delete</span></span><span style=''> <span
class=ComputerparameterChar>subname</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To undo changes to the BASIC program since it was last saved
(or renumbered, or new'd, or loaded), use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>undo</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To save the BASIC program permanently to flash memory, use
the command:</p>

<p class=MsoNormal>                                                                   </p>

<p class=Computerentry style='margin-left:.5in'><span style=''>save</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that any unsaved changes to the BASIC program will be
lost if the MCU is reset or loses power.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To renumber the BASIC program by 10's and save the BASIC
program permanently to flash memory, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>renumber</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To delete all lines from the BASIC program, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>new</span></p>

<b><span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h4>Examples</h4>

<p class=Computer>&gt; <span class=ComputerentryChar>10 dim a</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>20 for a = 1 to 10</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;</span></span><span
class=ComputerentryChar> auto 30</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>30 print a</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>40 next</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;
</span></span><span class=ComputerentryChar>50</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;
</span></span><span class=ComputerentryChar>60</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>save</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>list 20-40</span></p>

<p class=Computer>  20 for a = 1 to 10</p>

<p class=Computer>  30   print a</p>

<p class=Computer>  40 next</p>

<p class=Computer>end</p>

<p class=Computer>&gt; <span class=ComputerentryChar>delete 20-40</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>list</span></p>

<p class=Computer>  10 dim a</p>

<p class=Computer>end</p>

<p class=Computer>&gt; <span class=ComputerentryChar>undo</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>list</span></p>

<p class=Computer>  10 dim a</p>

<p class=Computer>  20 for a = 1 to 10</p>

<p class=Computer>  30   print a</p>

<p class=Computer>  40 next</p>

<p class=Computer>end</p>

<p class=Computer>&gt; <span class=ComputerentryChar>1 rem this is a comment</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>list</span></p>

<p class=Computer>   1 rem this is a comment</p>

<p class=Computer>  10 dim a</p>

<p class=Computer>  20 for a = 1 to 10</p>

<p class=Computer>  30   print a</p>

<p class=Computer>  40 next</p>

<p class=Computer>end</p>

<p class=Computer>&gt; <span class=ComputerentryChar>renumber</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>list</span></p>

<p class=Computer>  10 rem this is a comment</p>

<p class=Computer>  20 dim a</p>

<p class=Computer>  30 for a = 1 to 10</p>

<p class=Computer>  40   print a</p>

<p class=Computer>  50 next</p>

<p class=Computer>end</p>

<p class=Computer>&gt; <span class=ComputerentryChar>new</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>list</span></p>

<p class=Computer>end</p>

<p class=Computer>&gt; _</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801268">4.2.4<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Running Programs</a></h3>

<p class=MsoNormal>To run the BASIC program, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>run</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Alternately, to run the program starting at a specific line
number, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>run</span></span><span style=''> <span
class=ComputerparameterChar>line</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To stop a running BASIC program, press:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>&lt;Ctrl-C&gt;</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To continue a stopped BASIC program, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>cont</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Alternately, to continue a stopped BASIC program from a
specific line number, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>cont</span></span><span style=''> <span
class=ComputerparameterChar>line</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To set the autorun mode for the saved BASIC program, use the
command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>autorun</span></span><span style=''> (<span
class=ComputerentryChar>on</span>|<span class=ComputerentryChar>off</span>)</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This takes effect after the next MCU reset.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To display the autorun mode for the saved BASIC program, use
the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>autorun</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If the autorun mode is on, when the MCU is reset, it will
start running the saved BASIC program automatically.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that any unsaved changes to the BASIC program will be
lost if the MCU is reset or loses power.</p>

<b><span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h4>Examples</h4>

<p class=Computer>&gt; <span class=ComputerentryChar>10 dim a</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>20 while 1 do</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>30 let a = a+1</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>40 endwhile</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>save</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>run</span></p>

<p class=Computer><span class=ComputerentryChar>&lt;Ctrl-C&gt;</span></p>

<p class=Computer>STOP at line 40!</p>

<p class=Computer>&gt; <span class=ComputerentryChar>print a</span></p>

<p class=Computer>5272</p>

<p class=Computer>&gt; <span class=ComputerentryChar>cont</span></p>

<p class=Computer><span class=ComputerentryChar>&lt;Ctrl-C&gt;</span></p>

<p class=Computer>STOP at line 30!</p>

<p class=Computer>&gt; <span class=ComputerentryChar>print a</span></p>

<p class=Computer>11546</p>

<p class=Computer>&gt; <span class=ComputerentryChar>autorun</span></p>

<p class=Computer>off</p>

<p class=Computer>&gt; <span class=ComputerentryChar>autorun on</span></p>

<p class=Computer>&gt; _</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801269">4.2.5<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Loading and
Storing Programs</a></h3>

<p class=MsoNormal>The “current program” has no name and is saved and run by
default.  In addition to the current program, StickOS can load and store a
number of named BASIC programs in a flash filesystem.  Named programs are simply
copies of the current program that can be retrieved at a later time, but are
otherwise unaffected by all other StickOS commands than these.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To display the list of currently stored named programs, use
the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>dir</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To store the current program under the specified name, use
the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>save</span></span><span style=''> <span
class=ComputerparameterChar>name</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To load a named stored program to become the current
program, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>load</span></span><span style=''> <span
class=ComputerparameterChar>name</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To purge (erase) a stored program, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>purge</span></span><span style=''> <span
class=ComputerparameterChar>name</span></span></p>

<h4>Examples</h4>

<p class=Computer>&gt; <span class=ComputerentryChar>10 dim a</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>20 while 1 do</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>30 let a = a+1</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>40 endwhile</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>dir</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>save spinme</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>dir</span></p>

<p class=Computer>spinme</p>

<p class=Computer>&gt; <span class=ComputerentryChar>new</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>list</span></p>

<p class=Computer>end</p>

<p class=Computer>&gt; <span class=ComputerentryChar>load spinme</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>list</span></p>

<p class=Computer>  10 dim a</p>

<p class=Computer>  20 while 1 do</p>

<p class=Computer>  30   let a = a+1</p>

<p class=Computer>  40 endwhile</p>

<p class=Computer>end</p>

<p class=Computer>&gt; <span class=ComputerentryChar>purge spinme</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>dir</span></p>

<p class=Computer>&gt; _</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801270">4.2.6<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>BASIC Library</a></h3>

<p class=MsoNormal><span style='color:red'>(v1.90+)</span> It is recommended (but
not required) that you renumber the BASIC library before saving it, so that it
has line numbers that do not conflict with the main program, so that line
numbers are unambiguous when displayed and entered, such as:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>renumber</span></span><span style=''> <span
class=ComputerparameterChar><b><span style='font-style:normal'>10000</span></b></span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To save the BASIC library, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>save</span></span><span style=''> <span
class=ComputerparameterChar><b><span style='font-style:normal'>library</span></b></span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To load the BASIC library for editing, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>load</span></span><span style=''> <span
class=ComputerparameterChar><b><span style='font-style:normal'>library</span></b></span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Once a BASIC library is saved, its subroutines may be
accessed by name from any other BASIC program, using the statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>gosub </span></b><i><span style='
font-family:"Courier New"'>subname </span></i><span style='
font-family:"Courier New"'>[<i>expression</i>, ...]</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You may list all subroutine names in the current program and
BASIC library with the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>subs</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You may list individual subroutines by name with the
command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>list </span></span><span class=ComputerentryChar><i><span
style='font-weight:normal'>subname</span></i></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that you can list subroutines from the BASIC library
without loading the BASIC library for editing.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>See: <a href="#subs">Subroutines</a></p>

<b><span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h4>Examples</h4>

<p class=Computer>&gt; <span class=ComputerentryChar>10 sub doit</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>20 print &quot;hello&quot;</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>30 endsub</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>save library</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>new</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>list</span></p>

<p class=Computer><span class=ComputerentryChar>end</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>subs</span></p>

<p class=Computer><span class=ComputerentryChar>library:</span></p>

<p class=Computer><span class=ComputerentryChar>  doit</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>list doit</span></p>

<p class=Computer><span class=ComputerentryChar>library:</span></p>

<p class=Computer><span class=ComputerentryChar>  10 sub doit</span></p>

<p class=Computer><span class=ComputerentryChar>  20   print &quot;hello&quot;</span></p>

<p class=Computer><span class=ComputerentryChar>  30 endsub</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>10 gosub doit</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>list</span></p>

<p class=Computer><span class=ComputerentryChar>  10 gosub doit</span></p>

<p class=Computer><span class=ComputerentryChar>end</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>run</span></p>

<p class=Computer><span class=ComputerentryChar>hello</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar><span style='font-weight:
normal'>_</span></span></p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801271">4.2.7<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Debugging
Programs</a></h3>

<p class=MsoNormal>There are a number of techniques you can use for debugging
StickOS BASIC programs.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The simplest debugging technique is simply to insert print
statements in the program at strategic locations, and display the values of
variables.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A more powerful debugging technique is to insert one or more
breakpoints in the program, with the following statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerparameterChar><span
style=''>line</span></span><span style=''> <span
class=ComputerentryChar>stop</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When program execution reaches line, the program will stop
and then you can use immediate mode to display or modify the values of any and
all variables.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To continue a stopped BASIC program, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>cont</span></p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>cont</span></span><span style=''> <span
class=ComputerparameterChar>line</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>An even more powerful debugging technique is to insert one
or more conditional breakpoints in the program, with the following statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerparameterChar><span
style=''>line</span></span><span style=''> <span
class=ComputerentryChar>assert</span> <span class=ComputerparameterChar>expression</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When the program execution reaches line, expression is
evaluated, and if it is false (i.e., 0), the program will stop and you can use
immediate mode to display or modify the values of any and all variables.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Again, to continue a stopped BASIC program, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>cont</span></p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>cont</span></span><span style=''> <span
class=ComputerparameterChar>line</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The most powerful debugging technique, though also the most
expensive in terms of program performance, is to insert a watchpoint expression
in the program, with the following statement </p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerparameterChar><span
style=''>line</span></span><span style=''> <span
class=ComputerentryChar>on</span> <span class=ComputerparameterChar>expression </span><span
class=ComputerentryChar>do </span><span class=ComputerparameterChar>statement</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The watchpoint expression is re-evaluated before every line
of the program is executed; if the expression transitions from false to true,
the watchpoint statement handler runs.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When debugging, the statement handler is typically a “stop” statement,
such as:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerparameterChar><span
style=''>line</span></span><span style=''> <span
class=ComputerentryChar>on</span> <span class=ComputerparameterChar>expression </span><span
class=ComputerentryChar>do stop</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This will cause the program to stop as soon as the specified
expression becomes true, such as when a variable or pin takes on an incorrect
value.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To set the smart watchpoint mode, which dramatically reduces
watchpoint overhead at a slight delay of input pin sensitivity, use the
command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>watchsmart</span></span><span style=''>
(<span class=ComputerentryChar>on</span>|<span class=ComputerentryChar>off</span>)</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To display the smart watchpoint mode, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>watchsmart</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>At any time when a program is stopped, you can enter BASIC
program statements at the command-line with no line number and they will be
executed immediately; this is called &quot;immediate mode&quot;.  This allows
you to display the values of variables, with an immediate mode statement like:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>print</span></span><span style=''> <span
class=ComputerparameterChar>expression</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>It also allow you to modify the value of variables, with an
immediate mode statement like:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>let</span></span><span style=''> <span
class=ComputerparameterChar>variable</span> <span class=ComputerentryChar>=</span>
<span class=ComputerparameterChar>expression</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that if an immediate mode statement references a pin
variable, the live MCU pin is examined or manipulated, providing a very
powerful debugging technique for the embedded system itself!</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Thanks to StickOS’s transparent line-by-line compilation,
you can also edit a stopped BASIC program and then continue it, either from
where you left off or from another program location!</p>

<p class=MsoNormal>&nbsp;</p>

<span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal>When the techniques discussed above are insufficient for
debugging, two additional techniques exist -- single-stepping and tracing.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To set the single-step mode for the BASIC program, use the
command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>step</span></span><span style=''> (<span
class=ComputerentryChar>on</span>|<span class=ComputerentryChar>off</span>)</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To display the single-step mode for the BASIC program, use
the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>step</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>While single-step mode is on, the program will stop execution
after every statement, as if a stop statement was inserted after every line.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Additionally, while single-step mode is on, pressing <b><span
style='font-family:"Courier New"'>&lt;Enter&gt;</span></b> (essentially
entering what would otherwise be a blank command) is the same as the <span
class=ComputerentryChar><span style=''>cont</span></span>
command.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To set the trace mode for the BASIC program, use the
command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>trace</span></span><span style=''> (<span
class=ComputerentryChar>on</span>|<span class=ComputerentryChar>off</span>)</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To display the trace mode for the BASIC program, use the
command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>trace</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>While trace mode is on, the program will display all executed
lines<span style='color:red'> </span>and variable modifications while running. </p>

<h4>Examples</h4>

<p class=Computer>&gt; <span class=ComputerentryChar>10 dim a, sum</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>20 for a = 1 to 10000</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>30 let sum = sum+a</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>40 next</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>50 print sum</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>run</span></p>

<p class=Computer>50005000</p>

<p class=Computer>&gt; <span class=ComputerentryChar>25 stop</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>run</span></p>

<p class=Computer>STOP at line 25!</p>

<p class=Computer>&gt; <span class=ComputerentryChar>print a, sum</span></p>

<p class=Computer>1 0</p>

<p class=Computer>&gt; <span class=ComputerentryChar>cont</span></p>

<p class=Computer>STOP at line 25!</p>

<span style='font-family:"Courier New"'><br clear=all
style='page-break-before:always'>
</span>

<p class=Computer>&gt; <span class=ComputerentryChar>print a, sum</span></p>

<p class=Computer>2 1</p>

<p class=Computer>&gt; <span class=ComputerentryChar>25 assert a != 5000</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>cont</span></p>

<p class=Computer>assertion failed</p>

<p class=Computer>STOP at line 25!</p>

<p class=Computer>&gt; <span class=ComputerentryChar>print a, sum</span></p>

<p class=Computer>5000 12497500</p>

<p class=Computer>&gt; <span class=ComputerentryChar>cont</span></p>

<p class=Computer>50005000</p>

<p class=Computer>&gt; <span class=ComputerentryChar>delete 25</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>trace</span></p>

<p class=Computer>off</p>

<p class=Computer>&gt; <span class=ComputerentryChar>step</span></p>

<p class=Computer>off</p>

<p class=Computer>&gt; <span class=ComputerentryChar>trace on</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>step on</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>list</span></p>

<p class=Computer>  10 dim a, sum</p>

<p class=Computer>  20 for a = 1 to 10000</p>

<p class=Computer>  30   let sum = sum+a</p>

<p class=Computer>  40 next</p>

<p class=Computer>  50 print sum</p>

<p class=Computer>end</p>

<p class=Computer>&gt; <b>run</b></p>

<p class=Computer>  10 dim a, sum</p>

<p class=Computer>STOP at line 10!</p>

<p class=Computer>&gt; <b>cont</b></p>

<p class=Computer>  20 for a = 1 to 10000</p>

<p class=Computer>    let a = 1</p>

<p class=Computer>STOP at line 20!</p>

<p class=Computer>&gt;<b> &lt;Enter&gt;</b></p>

<p class=Computer>  30   let sum = sum+a</p>

<p class=Computer>    let sum = 1</p>

<p class=Computer>STOP at line 30!</p>

<p class=Computer>&gt;<b> &lt;Enter&gt;</b></p>

<p class=Computer>  40 next</p>

<p class=Computer>    let a = 2</p>

<p class=Computer>STOP at line 40!</p>

<p class=Computer>&gt;<b> &lt;Enter&gt;</b></p>

<p class=Computer>  30   let sum = sum+a</p>

<p class=Computer>    let sum = 3</p>

<p class=Computer>STOP at line 30!</p>

<p class=Computer>&gt; _</p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801272">4.2.8<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Other Commands</a></h3>

<p class=MsoNormal>To clear BASIC program variables, and reset all pins to
digital input mode, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>clear</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This command is also used after a stopped program has
defined program variables and before redefining program variables in
“immediate” mode, to avoid duplicate definition errors without having to erase
the program with a “new” command.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To clear BASIC program variables, including flash
parameters, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>clear
flash</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To display the StickOS memory usage, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>memory</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To reset the MCU as if it was just powered up, use the
command:<br>
<br>
</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>reset</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that the reset command inherently breaks the USB or
Ethernet connection between the MCU and host computer; press the “Disconnect”
button followed by the “Call” button, to reconnect Hyper Terminal.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To clear the terminal screen, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>cls</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To display the time since the MCU was last reset, use the
command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.4in'><span style=''>uptime</span></p>

<b><span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h4>Examples</h4>

<p class=Computer>&gt; <span class=ComputerentryChar>memory</span></p>

<p class=Computer>  0% ram code bytes used</p>

<p class=Computer>  0% flash code bytes used</p>

<p class=Computer>  0% ram variable bytes used</p>

<p class=Computer>  0% flash parameter bytes used</p>

<p class=Computer>  0% variables used</p>

<p class=Computer>&gt; <span class=ComputerentryChar>10 dim a[100]</span></p>

<p class=Computer><span class=ComputerentryChar>&gt; 20 rem this is a
loooooooooooooooooooooooooooooooooooooong line</span></p>

<p class=Computer>&gt; <b>run</b></p>

<p class=Computer>&gt; <b>memory</b></p>

<p class=Computer>  4% ram code bytes used (unsaved changes!)</p>

<p class=Computer>  0% flash code bytes used</p>

<p class=Computer> 19% ram variable bytes used</p>

<p class=Computer>  0% flash parameter bytes used</p>

<p class=Computer>  1% variables used </p>

<p class=Computer>&gt; <b>save</b></p>

<p class=Computer>&gt; <b>memory</b></p>

<p class=Computer>  0% ram code bytes used</p>

<p class=Computer>  1% flash code bytes used</p>

<p class=Computer> 19% ram variable bytes used</p>

<p class=Computer>  0% flash parameter bytes used</p>

<p class=Computer>  1% variables used</p>

<p class=Computer>&gt; <b>clear</b></p>

<p class=Computer>&gt; <b>memory</b></p>

<p class=Computer>  0% ram code bytes used</p>

<p class=Computer>  1% flash code bytes used</p>

<p class=Computer>  0% ram variable bytes used</p>

<p class=Computer>  0% flash parameter bytes used</p>

<p class=Computer>  0% variables used</p>

<p class=Computer>&gt; <b>list</b></p>

<p class=Computer>  10 dim a[100]</p>

<p class=Computer>  20 rem this is a loooooooooooooooooooooooooooooooooooooong
line</p>

<p class=Computer>end</p>

<p class=Computer>&gt; <span class=ComputerentryChar>uptime</span></p>

<p class=Computer>1d 15h 38m</p>

<p class=Computer>&gt; <span class=ComputerentryChar>reset</span></p>

<p class=Computer><span class=ComputerentryChar>_</span></p>

<p class=MsoNormal>&nbsp;</p>

<b><i><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></i></b>

<h2>4.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span> <a
name="_Toc306801273">BASIC Program Statements</a></h2>

<p class=MsoNormal>BASIC Program statements are typically entered into the
StickOS BASIC program with an associated line number, and then are executed
when the program runs.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Most BASIC program statements can also be executed in
immediate mode at the command prompt, without a line number, just as if the
program had encountered the statement at the current point of execution.</p>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801274">4.3.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Variable
Declarations</a></h3>

<p class=MsoNormal>All variables must be dimensioned prior to use.  Accessing
undimensioned variables results in an error and a value of 0.</p>

<h4>Simple RAM variables</h4>

<p class=MsoNormal>Simple RAM variables can be dimensioned as either integer
(32 bits, signed, by default), short (16 bits, unsigned), or byte (8 bits,
unsigned) with the following statements:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>dim </span></b><i><span style='
font-family:"Courier New"'>var</span></i></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>dim </span></b><i><span style='
font-family:"Courier New"'>var</span></i><b><span style='
font-family:"Courier New"'> as </span></b><span style='
font-family:"Courier New"'>(<b>short</b>|<b>byte</b>)</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Multiple variables can be dimensioned in the same statement,
by separating them with commas:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style=''>                </span><span
class=ComputerentryChar><span style=''>dim</span></span><span
style=''> </span><span class=ComputerparameterChar><span
style=''>var</span></span><span class=ComputerparameterChar><span
style='font-style:normal'> [<b>as</b> ...]</span></span><span
class=ComputerentryChar><span style=''>,</span></span><span
style=''> </span><span class=ComputerparameterChar><span
style=''>var</span></span><span class=ComputerparameterChar><span
style='font-style:normal'> [<b>as</b> ...]</span></span><span
class=ComputerparameterChar><b><span style=''>,</span></b></span><span
class=ComputerparameterChar><span style=''> ...</span></span></p>

<p class=MsoNormal><span style=''>&nbsp;</span></p>

<p class=MsoNormal>If no variable size (<b><span style='
font-family:"Courier New"'>short</span></b> or <b><span style='
font-family:"Courier New"'>byte</span></b>) is specified in a dimension
statement, integer is assumed; if no <b><span style='
font-family:"Courier New"'>as </span></b><i><span style='
font-family:"Courier New"'>...</span></i> is specified, a RAM variable is
assumed.</p>

<h4>Array RAM variables</h4>

<p class=MsoNormal>Array RAM variables can be dimensioned with the following
statements:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>dim </span></b><i><span style='
font-family:"Courier New"'>var</span></i><b><span style='
font-family:"Courier New"'>[</span></b><i><span style='
font-family:"Courier New"'>n</span></i><b><span style='
font-family:"Courier New"'>]</span></b></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>dim </span></b><i><span style='
font-family:"Courier New"'>var</span></i><b><span style='
font-family:"Courier New"'>[</span></b><i><span style='
font-family:"Courier New"'>n</span></i><b><span style='
font-family:"Courier New"'>] as </span></b><span style='
font-family:"Courier New"'>(<b>short</b>|<b>byte</b>)</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that simple variables are really just array variables
with only a single array element in them, so the array element <i><span
style='font-family:"Courier New"'>var</span></i><b><span
style='font-family:"Courier New"'>[0]</span></b> is the same
as <i><span style='font-family:"Courier New"'>var</span></i>,
and the dimension <b><span style='font-family:"Courier New"'>dim
</span></b><i><span style='font-family:"Courier New"'>var</span></i><b><span
style='font-family:"Courier New"'>[1]</span></b> is the same
as <b><span style='font-family:"Courier New"'>dim </span></b><i><span
style='font-family:"Courier New"'>var</span></i>.</p>

<h4>String RAM variables</h4>

<p class=MsoNormal>String RAM variables can be dimensioned with the following
statements:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>dim </span></b><i><span style='
font-family:"Courier New"'>var</span></i><b><span style='
font-family:"Courier New"'>$[</span></b><i><span style='
font-family:"Courier New"'>n</span></i><b><span style='
font-family:"Courier New"'>]</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Where <i><span style='font-family:"Courier New"'>n</span></i>
is the length of the array.  Array indices start at 0 and end at the length of
the array minus one.</p>

<p class=MsoNormal><span style='color:red'> </span></p>

<p class=MsoNormal>Note also that string variables are really just a nul-terminated
view into a byte array variable.</p>

<h4>MCU register variables</h4>

<p class=MsoNormal>Variables can also be dimensioned as MCU register variables
at absolute addresses with the following statements:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer><span style=''>       <span
class=ComputerentryChar>dim </span><span class=ComputerentryChar><i><span
style='font-weight:normal'>varabs</span></i></span><span
class=ComputerentryChar> at address </span><span class=ComputerentryChar><i><span
style='font-weight:normal'>addr</span></i></span></span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>       <span
class=ComputerentryChar>dim </span><span class=ComputerentryChar><i><span
style='font-weight:normal'>varabs</span></i></span><span
class=ComputerentryChar> as </span><span class=ComputerentryChar><span
style='font-weight:normal'>(</span></span><span class=ComputerentryChar>short</span><span
class=ComputerentryChar><span style='font-weight:normal'>|</span></span><span
class=ComputerentryChar>byte</span><span class=ComputerentryChar><span
style='font-weight:normal'>)</span></span><span class=ComputerentryChar> at
address </span><span class=ComputerentryChar><i><span style='font-weight:normal'>addr</span></i></span></span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>       <span
class=ComputerentryChar>dim </span><span class=ComputerentryChar><i><span
style='font-weight:normal'>varabs</span></i></span><span
class=ComputerentryChar>[</span><span class=ComputerentryChar><i><span
style='font-weight:normal'>n</span></i></span><span class=ComputerentryChar>]
at address </span><span class=ComputerentryChar><i><span style='font-weight:
normal'>addr</span></i></span></span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>       <span
class=ComputerentryChar>dim </span><span class=ComputerentryChar><i><span
style='font-weight:normal'>varabs</span></i></span><span
class=ComputerentryChar>[</span><span class=ComputerentryChar><i><span
style='font-weight:normal'>n</span></i></span><span class=ComputerentryChar>]
as </span><span class=ComputerentryChar><span style='font-weight:normal'>(</span></span><span
class=ComputerentryChar>short</span><span class=ComputerentryChar><span
style='font-weight:normal'>|</span></span><span class=ComputerentryChar>byte</span><span
class=ComputerentryChar><span style='font-weight:normal'>)</span></span><span
class=ComputerentryChar> at address </span><span class=ComputerentryChar><i><span
style='font-weight:normal'>addr</span></i></span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that you can trivially crash your MCU by accessing
registers incorrectly.</p>

<h4>Persistent integer (32 bits) flash variables</h4>

<p class=MsoNormal>Variables can also be dimensioned as persistent integer (32
bits) flash variables with the following statements:</p>

<p class=MsoNormal>                                                                                    </p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>dim </span></b><i><span style='
font-family:"Courier New"'>varflash</span></i><b><span style='
font-family:"Courier New"'> as flash</span></b></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>&nbsp;</span></b></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>dim </span></b><i><span style='
font-family:"Courier New"'>varflash</span></i><b><span style='
font-family:"Courier New"'>[</span></b><i><span style='
font-family:"Courier New"'>n</span></i><b><span style='
font-family:"Courier New"'>] as flash</span></b></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>&nbsp;</span></b></p>

<p class=MsoNormal>Persistent flash variables retain their values from one run
of a program to another (even if power is lost between runs), unlike RAM
variables which are cleared to 0 at the start of every run.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that since flash memory has a finite life (100,000
writes, typically), rewriting a flash variable should be a rare operation
reserved for program configuration changes, etc.  To attempt to enforce this,
StickOS delays all flash variable modifications by 0.5 seconds (the same as all
other flash memory updates).</p>

<p class=MsoNormal>&nbsp;</p>

<h4>Pin variables</h4>

<p class=MsoNormal>Finally, variables can be dimensioned as pin variables, used
to manipulate or examine the state of MCU I/O pins with the following
statements:</p>

<p class=MsoNormal style='margin-left:.5in'>&nbsp;</p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>dim
</span></b><i><span style='font-family:"Courier New"'>varpin</span></i><b><span
style='font-family:"Courier New"'> as pin </span></b><i><span
style='font-family:"Courier New"'>pinname</span></i><b><span
style='font-family:"Courier New"'> for </span></b><span
style='font-family:"Courier New"'>(<b>digital</b>|<b>analog</b>|<b>frequency</b>|<b>uart</b>)\</span></p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>       </span></b><span
style='font-family:"Courier New"'>(<b>input</b>|<b>output</b>) [<b>debounced</b>]
[<b>inverted</b>][<b>open_drain</b>]</span></p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>&nbsp;</span></b></p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>dim
</span></b><i><span style='font-family:"Courier New"'>varpin</span></i><b><span
style='font-family:"Courier New"'>[</span></b><i><span
style='font-family:"Courier New"'>n</span></i><b><span
style='font-family:"Courier New"'>] as pin </span></b><i><span
style='font-family:"Courier New"'>pinname</span></i><b><span
style='font-family:"Courier New"'> for </span></b><span
style='font-family:"Courier New"'>(<b>digital</b>|<b>analog</b>|<b>frequency</b>|<b>uart</b>)\</span></p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>       </span></b><span
style='font-family:"Courier New"'>(<b>input</b>|<b>output</b>) [<b>debounced</b>]
[<b>inverted</b>][<b>open_drain</b>]</span></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>&nbsp;</span></b></p>

<p class=MsoNormal>These are discussed in detail below, in the sections on Digital
I/O, Analog I/O, Servo I/O, Frequency I/O, and UART I/O.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>See also: <a href="#_Zigbee_Remote_Variables">ZigFlea Remote
Variables</a></p>

<b><span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h4>Examples</h4>

<p class=Computer>&gt; <span class=ComputerentryChar>new</span></p>

<p class=Computer>&gt; <b>10 dim array[4], b, volatile</b></p>

<p class=Computer>&gt; <b>20 dim led as pin dtin0 for digital output</b></p>

<p class=Computer>&gt; <b>30 dim potentiometer as pin an0 for analog input</b></p>

<p class=Computer>&gt; <b>40 dim persistent as flash</b></p>

<p class=Computer>&gt; <b>50 for b = 0 to 3</b></p>

<p class=Computer>&gt; <b>60   let array[b] = b*b</b></p>

<p class=Computer>&gt; <b>70 next</b></p>

<p class=Computer>&gt; <b>80 for b = 0 to 3</b></p>

<p class=Computer>&gt; <b>90   print array[b]</b></p>

<p class=Computer>&gt; <b>100   let led = !led</b></p>

<p class=Computer>&gt; <b>110 next</b></p>

<p class=Computer>&gt; <b>120 print &quot;potentiometer is&quot;, potentiometer</b></p>

<p class=Computer>&gt; <b>130 print &quot;volatile is&quot;, volatile</b></p>

<p class=Computer>&gt; <b>140 print &quot;persistent is&quot;, persistent</b></p>

<p class=Computer>&gt; <b>150 let persistent = persistent+1</b></p>

<p class=Computer>&gt; <b>run</b></p>

<p class=Computer>0</p>

<p class=Computer>1</p>

<p class=Computer>4</p>

<p class=Computer>9</p>

<p class=Computer>potentiometer is 1745</p>

<p class=Computer>volatile is 0</p>

<p class=Computer>persistent is 0</p>

<p class=Computer>&gt; <b>run</b></p>

<p class=Computer>0</p>

<p class=Computer>1</p>

<p class=Computer>4</p>

<p class=Computer>9</p>

<p class=Computer>potentiometer is 1745</p>

<p class=Computer>volatile is 0</p>

<p class=Computer>persistent is 1</p>

<p class=Computer>&gt; <b>dim pcntr0 as short at address 0x40150004</b></p>

<p class=Computer>&gt; <b>print pcntr0</b></p>

<p class=Computer>5338</p>

<p class=Computer>&gt; <b>print pcntr0</b></p>

<p class=Computer>2983</p>

<p class=Computer>&gt; _</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801275">4.3.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>System Variables</a></h3>

<p class=MsoNormal>The following system variables may be used in expressions or
simply with “print” statements to examine internal system state.  These
variables are all read-only.</p>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='margin-left:.5in;border-collapse:collapse;border:none'>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>analog
  </span></b><span style='color:red'>(v1.82+)</span> </p>
  </td>
  <td valign=top style='border:solid windowtext 1.0pt;border-left:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>analog supply millivolts </p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>getchar</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>most recent console character</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>keychar
  </span></b><span style='color:red'>(v1.82+)</span> </p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>most recent keypad character</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>nodeid</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>zigflea nodeid</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>msecs</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>number of milliseconds since boot</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>random</span></b><span
  style='color:red'> </span><b><span style='font-family:"Courier New"'> </span></b><span
  style='color:red'>(v1.90+)</span></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>32-bit pseudo-random number</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>seconds</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>number of seconds since boot</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>ticks</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>number of ticks since boot</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>ticks_per_msec</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>number of ticks per millisecond</p>
  </td>
 </tr>
</table>

<h4>Examples</h4>

<p class=Computer>&gt; <span class=ComputerentryChar>print seconds, ticks,
ticks/1000</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>2640
10562152 10562</span></span></p>

<p class=Computer>&gt;&nbsp;</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801276">4.3.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Variable Assignments</a></h3>

<p class=MsoNormal>Simple variables are assigned with the following statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>let </span></b><i><span style='
font-family:"Courier New"'>variable</span></i><b><span style='
font-family:"Courier New"'> = </span></b><i><span style='
font-family:"Courier New"'>expression</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='color:red'>(v1.90+) </span>The &quot;<b><span
style='font-family:"Courier New"'>let</span></b>&quot; keyword
is optional and may be omitted if <i><span style='font-family:
"Courier New"'>variable</span></i><b><span style='font-family:
"Courier New"'> </span></b>does not look like a BASIC command or statement keyword.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If the variable represents an output &quot;pin variable&quot;,
the corresponding MCU output pin is immediately updated.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Similarly, array variable elements are assigned with the
following statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>let </span></b><i><span style='
font-family:"Courier New"'>variable</span></i><b><span style='
font-family:"Courier New"'>[</span></b><i><span style='
font-family:"Courier New"'>expression</span></i><b><span style='
font-family:"Courier New"'>] = </span></b><i><span style='
font-family:"Courier New"'>expression</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Where the first <i><span style='font-family:
"Courier New"'>expression</span></i> evaluates to an array index between 0 and
the length of the array minus one, and the second <i><span style='font-family:"Courier New"'>expression</span></i> is assigned to the specified
array element.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>String variables are assigned with the following statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>let </span></b><i><span style='
font-family:"Courier New"'>variable</span></i><b><span style='
font-family:"Courier New"'>$ = </span></b><i><span style='
font-family:"Courier New"'>string</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Multiple variables may be assigned in a single statement by
separating them with commas:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>let </span></b><i><span style='
font-family:"Courier New"'>var1</span></i><b><span style='
font-family:"Courier New"'> = </span></b><i><span style='
font-family:"Courier New"'>expr1</span></i><b><span style='
font-family:"Courier New"'>,</span></b><i><span style='
font-family:"Courier New"'> var2</span></i><b><span style='
font-family:"Courier New"'> = </span></b><i><span style='
font-family:"Courier New"'>expr2</span></i><b><span style='
font-family:"Courier New"'>,</span></b><span style='
font-family:"Courier New"'> ...</span></p>

<b><span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h4>Examples</h4>

<p class=Computer>&gt; <span class=ComputerentryChar>10 dim simple, array[4]</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>20 while simple&lt;4 do</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>30   let array[simple] =
simple*simple</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>40   let simple = simple+1</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>50 endwhile</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>60 for simple = 0 to 3</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>70   print array[simple]</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>80 next</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>run</span></p>

<p class=Computer>0</p>

<p class=Computer>1</p>

<p class=Computer>4</p>

<p class=Computer>9</p>

<p class=Computer>&gt; <b>new</b></p>

<p class=Computer>&gt; <b>10 dim a$[20]</b></p>

<p class=Computer>&gt; <b>20 let a$=&quot;hello&quot;+&quot;
&quot;+&quot;world!&quot;</b></p>

<p class=Computer>&gt; <b>30 print a$</b></p>

<p class=Computer>&gt; <b>run</b></p>

<p class=Computer>hello world!</p>

<p class=Computer>&gt; _</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'>4.3.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span> <a name="_Toc306801277">Expressions</a></h3>

<p class=MsoNormal>StickOS BASIC expressions are very similar to C expressions,
and follow similar precedence and evaluation order rules.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The following operators are supported, in order of decreasing
precedence:</p>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='margin-left:.5in;border-collapse:collapse;border:none'>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><i><span style='font-family:"Courier New"'>n</span></i></p>
  </td>
  <td valign=top style='border:solid windowtext 1.0pt;border-left:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>decimal constant</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>0x</span></b><i><span
  style='font-family:"Courier New"'>n</span></i></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>hexadecimal constant</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>'</span></b><i><span
  style='font-family:"Courier New"'>c</span></i><b><span
  style='font-family:"Courier New"'>'</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>character constant</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><i><span style='font-family:"Courier New"'>variable</span></i></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>simple variable</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><i><span style='font-family:"Courier New"'>variable</span></i><b><span
  style='font-family:"Courier New"'>[</span></b><i><span
  style='font-family:"Courier New"'>expression</span></i><b><span
  style='font-family:"Courier New"'>]</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>array variable element</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><i><span style='font-family:"Courier New"'>variable</span></i><b><span
  style='font-family:"Courier New"'>#</span> </b>             </p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>length of array or string</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>( 
  )</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>grouping</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>! 
  ~</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>logical not, bitwise not</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>*  
  /   %</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>times, divide, mod</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>+  
  -</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>plus, minus</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>&gt;&gt; 
  &lt;&lt;</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>shift right, left</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>&lt;= 
  &lt;  &gt;=  &gt;</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>inequalities</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>== 
  !=</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>equal, not equal</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>|  
  ^   &amp;</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>bitwise or, xor, and</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>|| 
  ^^  &amp;&amp;</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>logical or, xor, and</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The plus and minus operators can be either binary (taking
two arguments, one on the left and one on the right) or unary (taking one
argument on the right); the logical and bitwise not operators are unary.  All
binary operators evaluate from left to right; all unary operators evaluate from
right to left.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that the <b><span style='font-family:
"Courier New"'>#</span></b> operator evaluates to the length of the array or
string variable whose name precedes it.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Logical and equality/inequality operators, above, evaluate
to 1 if <i>true</i>, and 0 if <i>false</i>.  For conditional expressions, any
non-0 value is considered to be <i>true</i>, and 0 is considered to be <i>false</i>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If the expression references an input &quot;pin
variable&quot;, the corresponding MCU input pin is sampled to evaluate the
expression.</p>

<p class=MsoNormal>&nbsp;</p>

<span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal>Note that when StickOS parses an expression and later
displays it (such as when you enter a program line and then list it), what you
are seeing is a de-compiled representation of the compiled code, since only the
compiled code is stored, to conserve RAM and flash memory.  So superfluous
parenthesis (not to mention spaces) will be removed from the expression, based
on the precedence rules above.</p>

<h4>Examples</h4>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>10 print 2*(3+4)</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>20 print 2+(3*4)</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>list</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  10
print 2*(3+4)</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  20
print 2+3*4</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>end</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
</span><span class=ComputerentryChar><span style=''>run</span></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>14</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>14</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
</span><span class=ComputerentryChar><span style=''>print 3+4</span></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>7</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
</span><span class=ComputerentryChar><span style=''>print -3+2</span></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>-1</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
</span><span class=ComputerentryChar><span style=''>print !0</span></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>1</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
</span><span class=ComputerentryChar><span style=''>print
5&amp;6</span></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>4</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
</span><span class=ComputerentryChar><span style=''>print
5&amp;&amp;6</span></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>1</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
</span><span class=ComputerentryChar><span style=''>print 3&lt;5</span></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>1</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
</span><span class=ComputerentryChar><span style=''>print 5&lt;3</span></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>0</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>print 3&lt;&lt;1</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>6</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>dim a[7]</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>print a#</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>7</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
_</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&nbsp;</span></p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801278">4.3.5<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Strings</a></h3>

<p class=MsoNormal>StickOS supports string variables as a nul-terminated views
into byte arrays.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A string variable may be declared, with a maximum length <i><span
style='font-family:"Courier New"'>n</span></i>, with:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>dim </span></b><i><span style='
font-family:"Courier New"'>var</span></i><b><span style='
font-family:"Courier New"'>$[</span></b><i><span style='
font-family:"Courier New"'>n</span></i><b><span style='
font-family:"Courier New"'>]</span></b></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>&nbsp;</span></b></p>

<p class=MsoNormal>A string may then be assigned with:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>let </span></b><i><span style='
font-family:"Courier New"'>variable</span></i><b><span style='
font-family:"Courier New"'>$ = </span></b><i><span style='
font-family:"Courier New"'>string</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Where <i><span style='font-family:"Courier New"'>string</span></i>
is an expression composed of one or more of:</p>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='margin-left:.5in;border-collapse:collapse;border:none'>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>&quot;</span></b><i><span
  style='font-family:"Courier New"'>literal</span></i><b><span
  style='font-family:"Courier New"'>&quot;</span></b></p>
  </td>
  <td valign=top style='border:solid windowtext 1.0pt;border-left:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>literal string</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><i><span style='font-family:"Courier New"'>variable</span></i><b><span
  style='font-family:"Courier New"'>$</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>variable string</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><i><span style='font-family:"Courier New"'>variable</span></i><b><span
  style='font-family:"Courier New"'>$[</span></b><i><span
  style='font-family:"Courier New"'>start</span></i><b><span
  style='font-family:"Courier New"'>:</span></b><i><span
  style='font-family:"Courier New"'>length</span></i><b><span
  style='font-family:"Courier New"'>]</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>variable substring</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>+</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>string concatenation operator</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A string may be tested in a conditional statement with a
condition of the form:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>if </span></b><i><span style='
font-family:"Courier New"'>string relation string</span></i><b><span
style='font-family:"Courier New"'> then</span></b></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>while </span></b><i><span style='
font-family:"Courier New"'>string relation string</span></i><b><span
style='font-family:"Courier New"'> do</span></b></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>until </span></b><i><span style='
font-family:"Courier New"'>string relation string</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Where <i><span style='font-family:"Courier New"'>relation
</span></i>is one of:</p>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='margin-left:.5in;border-collapse:collapse;border:none'>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>&lt;= 
  &lt;  &gt;=  &gt;</span></b></p>
  </td>
  <td valign=top style='border:solid windowtext 1.0pt;border-left:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>inequalities</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>== 
  !=</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>equal, not equal</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b><span style='font-family:"Courier New"'>~ 
  !~</span></b></p>
  </td>
  <td valign=top style='border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;
  border-right:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>contains, does not contain</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The current length of a string can be represented in an
integer expression by:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><i><span style='
font-family:"Courier New"'>variable</span></i><b><span style='
font-family:"Courier New"'>#</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Strings may also be explicitly specified in <b><span
style='font-family:"Courier New"'>dim</span></b>, <b><span style='font-family:
"Courier New"'>input</span></b>, <b><span style='font-family:"Courier New"'>let</span></b>,
<b><span style='font-family:"Courier New"'>print</span></b>, and <b><span
style='font-family:"Courier New"'>vprint</span></b> statements.</p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h4>Examples</h4>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>new</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>10 dim i, a$[10]</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>20 input a$</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>30 for i = 0 to a#-1</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>40 print a$[i:1]</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>50 next</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>run</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>? <b>hello</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>h</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>e</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>l</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>l</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>o</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>new</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>10 dim a$[10]</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>20 input a$</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>30 if a$ ~ &quot;y&quot; then</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>40 print &quot;yes&quot;</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>50 else</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>60 print &quot;no&quot;</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>70 endif</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>run</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>? <b>aya</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>yes</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>run</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>? <b>aaa</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>no</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;&nbsp;</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Print_Statements"></a><a
name="_Toc306801279">4.3.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span>Print Statements</a></h3>

<p class=MsoNormal>While the MCU is connected to the host computer, print
statements can be observed on the Hyper Terminal console window.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Print statements can be used to print integer expressions,
using either a decimal or hexadecimal output radix, or printing raw ASCII bytes:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>print </span></b><span style='
font-family:"Courier New"'>[<b>dec</b>|<b>hex</b>|<b>raw</b>]<b> </b><i>expression</i>
[<b>;</b>]</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Or strings:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>print </span></b><i><span style='
font-family:"Courier New"'>string</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Or various combinations of both:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>print </span></b><i><span style='
font-family:"Courier New"'>string</span></i><b><span style='
font-family:"Courier New"'>, </span></b><span style='
font-family:"Courier New"'>[<b>dec</b>|<b>hex</b>|<b>raw</b>]<b> </b><i>expression</i><b>,
</b><i>... </i>[<b>;</b>]</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='color:red'>(v1.90+) </span>The &quot;<b><span
style='font-family:"Courier New"'>print</span></b>&quot;
keyword may be abbreviated with a &quot;<b><span style='
font-family:"Courier New"'>?</span></b>&quot;.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If the <i><span style='font-family:"Courier New"'>expression</span></i>
specifies an array, its entire array contents are printed.  If the <i><span
style='font-family:"Courier New"'>expression</span></i> references
an input &quot;pin variable&quot;, the corresponding MCU input pin is sampled
to evaluate the expression.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A trailing semi-colon (<b><span style='
font-family:"Courier New"'>;</span></b>) suppresses the
carriage-return/linefeed that usually follows each printed line.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that when the MCU is disconnected from the host
computer, print statement output is simply discarded.</p>

<h4>Examples</h4>

<p class=Computer>&gt; <span class=ComputerentryChar>print &quot;hello
world&quot;</span></p>

<p class=Computer>hello world</p>

<p class=Computer>&gt; <span class=ComputerentryChar>print 57*84</span></p>

<p class=Computer>4788</p>

<p class=Computer>&gt; <span class=ComputerentryChar>print hex 57*84</span></p>

<p class=Computer>0x12b4</p>

<p class=Computer>&gt; <span class=ComputerentryChar>print 9, &quot;squared
is&quot;, hex 9*9</span></p>

<p class=Computer>9 squared is 0x51</p>

<p class=Computer>&gt; <span class=ComputerentryChar>dim a[2]</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>print a</span></p>

<p class=Computer>0 0</p>

<p class=Computer>&gt; print 1;</p>

<p class=Computer>1&gt; _</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801280">4.3.7<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Variable Print
Statements</a></h3>

<p class=MsoNormal><span style='color:black'>Variable print statements can be
used to convert strings to integers and vice versa, as well as integers from
decimal to hexadecimal radix, etc.  Basically, variable print statements are
identical to print statements, except rather than printing the result to the
console, the result is &quot;printed&quot; to a variable.</span></p>

<p class=MsoNormal><span style='color:black'>&nbsp;</span></p>

<p class=MsoNormal>Variable print statements can be used to print integer
expressions, using either a decimal or hexadecimal output radix, or printing raw
ASCII bytes:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>vprint </span></b><i><span style='
font-family:"Courier New"'>variable</span></i><span style='
font-family:"Courier New"'>[<b>$</b>]<b> = </b>[<b>dec</b>|<b>hex</b>|<b>raw</b>]<b>
</b><i>expression</i></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Or strings:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>vprint </span></b><i><span style='
font-family:"Courier New"'>variable</span></i><span style='
font-family:"Courier New"'>[<b>$</b>]<b> = </b><i>string</i></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Or various combinations of both:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>vprint </span></b><i><span style='
font-family:"Courier New"'>variable</span></i><span style='
font-family:"Courier New"'>[<b>$</b>]<b> = </b><i>string</i><b>, \</b></span></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>  </span></b><span style='
font-family:"Courier New"'>[<b>dec</b>|<b>hex</b>|<b>raw</b>]<b> </b><i>expression</i><b>,
</b><i>...</i></span></p>

<p class=MsoNormal><span style='color:black'>&nbsp;</span></p>

<p class=MsoNormal><span style='color:black'>In all cases, the resulting output
is assigned to the specified integer or string variable.  If a type conversion
error occurs (such as assigning a non-integer string to an integer variable),
program execution stops.</span></p>

<h4>Examples</h4>

<p class=Computer>&gt; <b>clear</b></p>

<p class=Computer>&gt; <b>dim a, b$[10]</b></p>

<p class=Computer>&gt; <b>let b$=&quot;123&quot;</b></p>

<p class=Computer>&gt; <b>vprint a = b$[0:2]+&quot;4&quot;</b></p>

<p class=Computer>&gt; <b>print a</b></p>

<p class=Computer>124</p>

<p class=Computer>&gt; <b>vprint b$ = &quot;hello&quot;, a</b></p>

<p class=Computer>&gt; <b>print b$</b></p>

<p class=Computer>hello 124</p>

<p class=Computer>&gt; _</p>

<p class=MsoNormal><span style='color:black'>&nbsp;</span></p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801281">4.3.8<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Input Statements</a></h3>

<p class=MsoNormal>While the MCU is connected to the host computer, input
statements can be serviced from the Hyper Terminal console window.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Input statements can be used to input integer expressions,
using either a decimal or hexadecimal output radix, or input raw ASCII bytes:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>input </span></b><span style='
font-family:"Courier New"'>[<b>dec</b>|<b>hex</b>|<b>raw</b>]<b> </b><i>variable</i>[<b>$</b>],
...</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If the <i><span style='font-family:"Courier New"'>variable</span></i>
specifies an array (or a string), the entire array (or string) contents are
input.  If the <i><span style='font-family:"Courier New"'>expression</span></i>
references an output &quot;pin variable&quot;, the corresponding MCU output pin
is immediately updated.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When the input statement is serviced, StickOS prints a
prompt to the console:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>? </span></b><span style='
font-family:"Courier New"'>_</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>And the user enters integer or string values, as appropriate,
followed by the &lt;Enter&gt; key.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that while waiting for input, BASIC interrupt handlers
continue to run.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Also, the most recent console input character is available
in the system variable &quot;getchar&quot;, which you will typically use as
&quot;getchar$&quot;.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that when the MCU is disconnected from the host computer,
input statements hang the program.</p>

<h4>Examples</h4>

<p class=Computer>&gt; <b>new</b></p>

<p class=Computer>&gt; <b>10 dim a, b$[20]</b></p>

<p class=Computer>&gt; <b>20 input a, b$</b></p>

<p class=Computer>&gt; <b>30 print a*2, b$</b></p>

<p class=Computer>&gt; <b>run</b></p>

<p class=Computer>? <b>12 hello world!</b></p>

<p class=Computer>24 hello world!</p>

<p class=Computer>&gt; _</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801282">4.3.9<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Read/Data
Statements</a></h3>

<p class=MsoNormal>A program can declare read-only data in its code statements,
and then consume the data at run-time.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To declare the read-only data, use the <span
class=ComputerentryChar><span style=''>data</span></span>
statement as many times as needed:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>data</span></span><span style=''> n</span></p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>data</span></span><span style=''> <span
class=ComputerparameterChar>n</span><span class=ComputerentryChar>,</span> <span
class=ComputerparameterChar>n</span><span class=ComputerentryChar>,</span> ...</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To consume data values and assign them to variables at
runtime, use the <span class=ComputerentryChar><span style=''>read</span></span>
statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>read</span></span><span style=''> <span
class=ComputerparameterChar>variable</span></span></p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>read</span></span><span style=''> <span
class=ComputerparameterChar>variable</span><span class=ComputerentryChar>,</span>
<span class=ComputerparameterChar>variable</span><span class=ComputerentryChar>,</span>
...</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If a read is attempted when no more data exists, the program
stops with an &quot;out of data&quot; error.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A line may be labeled and the current data consumer pointer
may be moved to a specific (labeled) line with the statements:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Courier New"'>      <b>label</b>
<i>label</i></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>      <b>restore</b>
<i>label</i></span></p>

<h4>Examples</h4>

<p class=Computer>&gt; <span class=ComputerentryChar>10 dim a, b</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>20 data 1, 2, 3</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>30 data 4</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>40 data 5, 6</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>50 data 7</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>60 while 1 do</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>70   read a, b</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>80   print a, b</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>90 endwhile</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>100 data 8</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>run</span></p>

<p class=Computer>1 2</p>

<p class=Computer>3 4</p>

<p class=Computer>5 6</p>

<p class=Computer>7 8</p>

<p class=Computer>out of data</p>

<p class=Computer>STOP at line 70!</p>

<p class=Computer>&gt; _</p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801283">4.3.10<span
style='font:7.0pt "Times New Roman"'> </span>Conditional Statements</a></h3>

<p class=MsoNormal>Non-looping conditional statements are of the form:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>if </span></b><i><span style='
font-family:"Courier New"'>expression</span></i><b><span style='
font-family:"Courier New"'> then</span></b></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>      </span></b><i><span style='
font-family:"Courier New"'>statements</span></i></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>elseif </span></b><i><span style='
font-family:"Courier New"'>expression</span></i><b><span style='
font-family:"Courier New"'> then</span></b></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>      </span></b><i><span style='
font-family:"Courier New"'>statements</span></i></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>else</span></b></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>      </span></b><i><span style='
font-family:"Courier New"'>statements</span></i></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>endif</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Where <i><span style='font-family:"Courier New"'>statements</span></i>
is one or more program statements and the <b><span style='
font-family:"Courier New"'>elseif</span></b> and <b><span style='font-family:"Courier New"'>else</span></b> clauses (and their
corresponding <i><span style='font-family:"Courier New"'>statements</span></i>)
are optional.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Alternately, the string form of this statement is:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>if </span></b><i><span style='
font-family:"Courier New"'>string relation string</span></i><b><span
style='font-family:"Courier New"'> then</span></b></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>      </span></b><i><span style='
font-family:"Courier New"'>statements</span></i></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>elseif </span></b><i><span style='
font-family:"Courier New"'>string relation string</span></i><b><span
style='font-family:"Courier New"'> then</span></b></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>      </span></b><i><span style='
font-family:"Courier New"'>statements</span></i></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>else</span></b></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>      </span></b><i><span style='
font-family:"Courier New"'>statements</span></i></p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>      endif</span></b></p>

<h4>Examples</h4>

<p class=Computer>&gt; <span class=ComputerentryChar>10 dim a</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>20 for a = -4 to 4</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>30   if !a then</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>40     print a, &quot;is
zero&quot;</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>50   elseif a%2 then</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>60     print a, &quot;is
odd&quot;</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>70   else</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>80     print a, &quot;is
even&quot;</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>90   endif</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>100 next</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>run</span></p>

<p class=Computer>-4 is even</p>

<p class=Computer>-3 is odd</p>

<p class=Computer>-2 is even</p>

<p class=Computer>-1 is odd</p>

<p class=Computer>0 is zero</p>

<p class=Computer>1 is odd</p>

<p class=Computer>2 is even</p>

<p class=Computer>3 is odd</p>

<p class=Computer>4 is even</p>

<p class=Computer>&gt; _</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801284">4.3.11<span
style='font:7.0pt "Times New Roman"'> </span>Looping Conditional Statements</a></h3>

<p class=MsoNormal>Looping conditional statements include the traditional BASIC
for-next loop and the more structured while-endwhile and do-until loops.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The for-next loop statements are of the form:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>for </span></b><i><span style='
font-family:"Courier New"'>variable</span></i><b><span style='
font-family:"Courier New"'> = </span></b><i><span style='
font-family:"Courier New"'>expression</span></i><b><span style='
font-family:"Courier New"'> to </span></b><i><span style='
font-family:"Courier New"'>expression </span></i><b><span style='font-family:"Courier New"'>step </span></b><i><span style='font-family:"Courier New"'>expression</span></i></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>       </span></b><i><span style='
font-family:"Courier New"'>statements</span></i></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>next</span></b></p>

<p class=MsoNormal>                      </p>

<p class=MsoNormal>Where <i><span style='font-family:"Courier New"'>statements</span></i>
is one or more program statements and the <b><span style='
font-family:"Courier New"'>step</span></b><i><span style='
font-family:"Courier New"'> expression</span></i> clause is optional and
defaults to 1.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The for-next loop expressions are evaluated only once, on
initial entry to the loop.  The loop variable is initially set to the value of
the first expression.  Each time the loop variable is within the range
(inclusive) of the first and second expression, the statements within the loop
execute.  At the end of the loop, if the incremented loop variable would still
be within the range (inclusive) of the first and second expression, the loop
variable is incremented by the step value, and the loop repeats again.  On exit
from the loop, the loop variable is equal to the value it had during the last
iteration of the loop.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The while-endwhile loop statements are of the form:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>while </span></b><i><span style='
font-family:"Courier New"'>expression</span></i><b><span style='
font-family:"Courier New"'> do</span></b></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>      </span></b><i><span style='
font-family:"Courier New"'>statements</span></i></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>endwhile</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Where <i><span style='font-family:"Courier New"'>statements</span></i>
is one or more program statements .</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Alternately, the string form of this statement is:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>while </span></b><i><span style='
font-family:"Courier New"'>string relation string</span></i><b><span
style='font-family:"Courier New"'> do</span></b></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>      </span></b><i><span style='
font-family:"Courier New"'>statements</span></i></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>endwhile</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The while-endwhile loop conditional expression is evaluated
on each entry to the loop.  If it is true (non-0), the statements within the
loop execute, and the loop repeats again.  On exit from the loop, the
conditional expression is false.</p>

<p class=MsoNormal>&nbsp;</p>

<span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal>The do-until loop statements are of the form:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>do</span></b></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>      </span></b><i><span style='
font-family:"Courier New"'>statements</span></i></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>until </span></b><i><span style='
font-family:"Courier New"'>expression</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Where <i><span style='font-family:"Courier New"'>statements</span></i>
is one or more program statements .</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Alternately, the string form of this statement is:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>do</span></b></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>      </span></b><i><span style='
font-family:"Courier New"'>statements</span></i></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>until </span></b><i><span style='
font-family:"Courier New"'>string relation string</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The do-until loop conditional expression is evaluated on
each exit from the loop.  If it is false (0), the loop repeats again.  On exit
from the loop, the conditional expression is true.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In all three kinds of loops, the loop can be exited
prematurely using the statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>break</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This causes program execution to immediately jump to the
statements following the terminal statement (i.e., the <b><span
style='font-family:"Courier New"'>next</span></b>, <b><span
style='font-family:"Courier New"'>endwhile</span></b>, or <b><span
style='font-family:"Courier New"'>until</span></b>) of the
innermost loop.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Additionally, multiple nested loops can be exited
prematurely together using the statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>break </span></b><i><span style='
font-family:"Courier New"'>n</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Which causes program execution to immediately jump to the
statements following the terminal statement (i.e., the <b><span
style='font-family:"Courier New"'>next</span></b>, <b><span
style='font-family:"Courier New"'>endwhile</span></b>, or <b><span
style='font-family:"Courier New"'>until</span></b>) of the
innermost <i><span style='font-family:"Courier New"'>n</span></i>
loops.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Similarly, a loop can be continued, causing execution to
resume immediately with the conditional expression evaluation, using the
statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>continue</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This causes program execution to immediately jump to the
conditional expression evaluation, at which point the loop may conditionally
execute again.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Multiple nested loops can be continued together using the
statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>continue </span></b><i><span style='
font-family:"Courier New"'>n</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Which causes program execution to immediately jump to the conditional
expression evaluation of the innermost <i><span style='
font-family:"Courier New"'>n</span></i> loops.</p>

<p class=MsoNormal>&nbsp;</p>

<h4>Examples</h4>

<p class=Computer>&gt; <span class=ComputerentryChar>10 dim a, b, sum</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>20 while 1 do</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>30   if a==10 then</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>40     break</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>50   endif</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>60   let sum = 0</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>70   for b = 0 to a</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>80     let sum = sum+b</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>90   next</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>100   print &quot;sum of
integers 0 thru&quot;, a, &quot;is&quot;, sum</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>110   let a = a+1</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>120 endwhile</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>run</span></p>

<p class=Computer>sum of integers 0 thru 0 is 0</p>

<p class=Computer>sum of integers 0 thru 1 is 1</p>

<p class=Computer>sum of integers 0 thru 2 is 3</p>

<p class=Computer>sum of integers 0 thru 3 is 6</p>

<p class=Computer>sum of integers 0 thru 4 is 10</p>

<p class=Computer>sum of integers 0 thru 5 is 15</p>

<p class=Computer>sum of integers 0 thru 6 is 21</p>

<p class=Computer>sum of integers 0 thru 7 is 28</p>

<p class=Computer>sum of integers 0 thru 8 is 36</p>

<p class=Computer>sum of integers 0 thru 9 is 45</p>

<p class=Computer>&gt; _</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Subroutines"></a><a
name="_Toc306801285">4.3.12<span style='font:7.0pt "Times New Roman"'> </span>Subroutines</a></h3>

<p class=MsoNormal><a name=subs></a>A subroutine is called with the following
statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>gosub </span></b><i><span style='
font-family:"Courier New"'>subname </span></i><span style='
font-family:"Courier New"'>[<i>expression</i>, ...]</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A subroutine is declared with the following statements:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>sub </span></b><i><span style='
font-family:"Courier New"'>subname </span></i><span style='
font-family:"Courier New"'>[<i>param</i>, ...]</span></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>      </span></b><i><span style='
font-family:"Courier New"'>statements</span></i></p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>endsub</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The sub can be exited prematurely using the statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>return</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This causes program execution to immediately return to the
statements following the <b><span style='font-family:"Courier New"'>gosub
</span></b>statement that called the subroutine.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In general, subroutines should be declared out of the normal
execution path of the code, and typically are defined at the end of the
program.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Subroutine parameters are essentially variables local to the
subroutine which are initialized to the values of the caller’s gosub
expressions.  Simple variable caller’s gosub <i><span style='
font-family:"Courier New"'>expression</span></i>'s, however, are passed to sub <i><span
style='font-family:"Courier New"'>param</span></i>'s by
reference, allowing the sub to modify the caller’s variables; all other
caller's gosub expressions are passed by value.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that to force a variable to be passed by value to a
subroutine, simply use a trivial expression like &quot;var+0&quot; in the gosub
statement expression.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note also that to return a value from a subroutine, pass in
a simple variable (by reference) and have the subroutine modify the
corresponding param before it returns.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Any variables dimensioned in a subroutine are local to that
subroutine.  Local variables hide variables of the same name dimensioned in
outer-more scopes.  Local variables are automatically un-dimensioned when the
subroutine returns.</p>

<p class=MsoNormal>&nbsp;</p>

<span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal><span style='color:red'>(v1.90+) </span>You may list all
subroutine names in the current program and BASIC library with the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>subs</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<h4>Examples</h4>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;</span></span><span
class=ComputerentryChar> 10 dim a</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;</span></span><span
class=ComputerentryChar> 20 for a = 0 to 9</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;</span></span><span
class=ComputerentryChar> 30   gosub sumit a</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;</span></span><span
class=ComputerentryChar> 40 next</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;</span></span><span
class=ComputerentryChar> 50 end</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;</span></span><span
class=ComputerentryChar> 60 sub sumit numbers</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;</span></span><span
class=ComputerentryChar> 70   dim a, sum</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;</span></span><span
class=ComputerentryChar> 80   for a = 1 to numbers</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;</span></span><span
class=ComputerentryChar> 90     let sum = sum+a</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;
</span></span><span class=ComputerentryChar>100   next</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;</span></span><span
class=ComputerentryChar> 110   print &quot;sum of integers 0 thru&quot;,
numbers, &quot;is&quot;, sum</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;</span></span><span
class=ComputerentryChar> 120 endsub</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;</span></span><span
class=ComputerentryChar> run</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>sum
of integers 0 thru 0 is 0</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>sum
of integers 0 thru 1 is 1</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>sum
of integers 0 thru 2 is 3</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>sum
of integers 0 thru 3 is 6</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>sum
of integers 0 thru 4 is 10</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>sum
of integers 0 thru 5 is 15</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>sum
of integers 0 thru 6 is 21</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>sum
of integers 0 thru 7 is 28</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>sum
of integers 0 thru 8 is 36</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>sum
of integers 0 thru 9 is 45</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;</span></span>
<b>new</b></p>

<p class=Computer>&gt; <b>10 dim a</b></p>

<p class=Computer>&gt; <b>20 print a</b></p>

<p class=Computer>&gt; <b>30 gosub increment a</b></p>

<p class=Computer>&gt; <b>40 gosub increment a</b></p>

<p class=Computer>&gt; <b>50 print a</b></p>

<p class=Computer>&gt; <b>60 end</b></p>

<p class=Computer>&gt; <b>70 sub increment value</b></p>

<p class=Computer>&gt; <b>80   let value = value+1</b></p>

<p class=Computer>&gt; <b>90 endsub</b></p>

<p class=Computer>&gt; <b>run</b></p>

<p class=Computer>0</p>

<p class=Computer>2</p>

<p class=Computer>&gt; _</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'>4.3.13<span style='font:7.0pt "Times New Roman"'>
</span> <a name="_Toc306801286">Timers</a></h3>

<p class=MsoNormal>StickOS supports up to four internal interval timers (0 thru
3) for use by the program.  Timer interrupts are delivered when the specified time
interval has elapsed since the previous interrupt was delivered.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Timer interrupt intervals are configured with the statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>configure timer </span></b><i><span
style='font-family:"Courier New"'>n</span></i><b><span
style='font-family:"Courier New"'> for </span></b><i><span
style='font-family:"Courier New"'>m</span></i><b><span
style='font-family:"Courier New"'> </span></b><span
style='font-family:"Courier New"'>(<b>s</b>|<b>ms</b>|<b>us</b>)</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This configures timer <i><span style='
font-family:"Courier New"'>n</span></i> to interrupt every <i><span
style='font-family:"Courier New"'>m</span></i> seconds, milliseconds,
or microseconds.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that the minimum timer resolution is the clock tick,
which is 0.25 milliseconds.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The timer interrupt can then be enabled, and the
statement(s) to execute when it is delivered specified, with the statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>on timer </span></b><i><span style='
font-family:"Courier New"'>n</span></i><b><span style='
font-family:"Courier New"'> </span></b><i><span style='
font-family:"Courier New"'>statement</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If <i><span style='font-family:"Courier New"'>statement</span></i>
is a &quot;<b><span style='font-family:"Courier New"'>gosub</span></b><span
style='font-family:"Courier New"'> <i>subname ...</i></span>&quot;,
then all of the statements in the corresponding sub are executed when the timer
interrupt is delivered; otherwise, just the single <i><span style='font-family:"Courier New"'>statement</span></i> is executed.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The timer interrupt can later be completely ignored (i.e.,
discarded) with the statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>off timer </span></b><i><span style='
font-family:"Courier New"'>n</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The timer interrupt can be temporarily masked (i.e., held
off but not discarded) with the statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>mask timer </span></b><i><span style='font-family:"Courier New"'>n</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>And can later be unmasked (i.e., any pending interrupts
delivered) with the statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>unmask timer </span></b><i><span style='font-family:"Courier New"'>n</span></i></p>

<b><span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h4>Examples</h4>

<p class=Computer>&gt; <span class=ComputerentryChar>10 dim ticks</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>20 configure timer 0 for
1000 ms</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>30 on timer 0 do print
&quot;slow&quot;</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>40 configure timer 1 for
200 ms</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>50 on timer 1 do gosub
fast</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>60 sleep 3 s</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>70 print &quot;ticks
is&quot;, ticks</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>80 end</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>90 sub fast</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>100   let ticks = ticks+1</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>110 endsub</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>run</span></p>

<p class=Computer>slow</p>

<p class=Computer>slow</p>

<p class=Computer>slow</p>

<p class=Computer>ticks is 14</p>

<p class=Computer>&gt; _</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801287">4.3.14<span
style='font:7.0pt "Times New Roman"'> </span>Digital I/O</a></h3>

<p class=MsoNormal>StickOS supports digital I/O on all pins.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A pin is configured for digital I/O, and a variable bound to
that pin, with the following statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>dim </span></b><i><span style='
font-family:"Courier New"'>varpin</span></i><b><span style='
font-family:"Courier New"'> as pin </span></b><i><span style='
font-family:"Courier New"'>pinname</span></i><b><span style='
font-family:"Courier New"'> for digital </span></b><span style='
font-family:"Courier New"'>(<b>input</b>|<b>output</b>) \</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='
font-family:"Courier New"'>       [<b>debounced</b>] [<b>inverted</b>] [<b>open_drain</b>]</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If a pin is configured for digital input, then subsequently
reading the variable <i><span style='font-family:"Courier New"'>varpin</span></i><b><span
style='font-family:"Courier New"'> </span></b>will return the
value 0 if the digital input pin is currently at a low level, or 1 if the
digital input pin is currently at a high level.  It is illegal to attempt write
the variable <i><span style='font-family:"Courier New"'>varpin</span></i><b><span
style='font-family:"Courier New"'> </span></b>(i.e., it is
read-only).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If a pin is configured for digital output, then writing <i><span
style='font-family:"Courier New"'>varpin</span></i><b><span
style='font-family:"Courier New"'> </span></b>with a 0 value
will set the digital output pin to a low level, and writing it with a non-0 value
will set the digital output pin to a high level.  Reading the variable <i><span
style='font-family:"Courier New"'>varpin</span></i><b><span
style='font-family:"Courier New"'> </span></b>will return the
value 0 if the digital output pin is currently at a low level, or 1 if the
digital output pin is currently at a high level.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If the <b><span style='font-family:"Courier New"'>debounced</span></b>
pin qualifier is used, input values are passed thru a 12ms glitch-elimination
filter.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If the <b><span style='font-family:"Courier New"'>inverted</span></b>
pin qualifier is used, all input and output values are logically inverted (i.e.,
0-&gt;1, 1-&gt;0) at the pin.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If the <b><span style='font-family:"Courier New"'>open_drain</span></b>
pin qualifier is used, an output pin is tri-stated for a logic 1 output.</p>

<h4>Examples</h4>

<p class=MsoNormal>See <a href="#_Digital_I/O_Example_1">Digital I/O Example</a></p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801288">4.3.15<span
style='font:7.0pt "Times New Roman"'> </span>Analog I/O</a></h3>

<p class=MsoNormal>Use the <b><span style='font-family:"Courier New"'>help pins</span></b>
command to see the list of MCU pin names and their analog capabilities.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A pin is configured for analog I/O, and a variable bound to
that pin, with the following statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>dim </span></b><i><span style='
font-family:"Courier New"'>varpin</span></i><b><span style='
font-family:"Courier New"'> as pin </span></b><i><span style='
font-family:"Courier New"'>pinname</span></i><b><span style='
font-family:"Courier New"'> for analog </span></b><span style='
font-family:"Courier New"'>(<b>input</b>|<b>output</b>) \</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='
font-family:"Courier New"'>       [<b>debounced</b>] [<b>inverted</b>]</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If a pin is configured for analog input, then subsequently
reading the variable <i><span style='font-family:"Courier New"'>varpin</span></i><b><span
style='font-family:"Courier New"'> </span></b>will return the analog
voltage level, in millivolts (mV).  It is illegal to attempt write the variable
<i><span style='font-family:"Courier New"'>varpin</span></i><b><span
style='font-family:"Courier New"'> </span></b>(i.e., it is
read-only).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If a pin is configured for analog output, then writing <i><span
style='font-family:"Courier New"'>varpin</span></i><b><span
style='font-family:"Courier New"'> </span></b>with a millivolt
value will set the analog output (PWM actually) pin to a corresponding analog
voltage level.  Reading the variable <i><span style='
font-family:"Courier New"'>varpin</span></i><b><span style='
font-family:"Courier New"'> </span></b>will return the analog voltage level, in
millivolts (mV).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If the <b><span style='font-family:"Courier New"'>debounced</span></b>
pin qualifier is used, input values are passed thru a 12ms glitch-elimination
filter.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If the <b><span style='font-family:"Courier New"'>inverted</span></b>
pin qualifier is used, all input and output values are logically inverted at
the pin (i.e., the pin mV is replaced with the maximum analog supply voltage
millivolts minus the pin mV).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The maximum analog supply voltage millivolts may be
displayed with the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>      analog</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Configure the maximum analog supply voltage millivolts with
the following command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>      analog
</span></b><i><span style='font-family:"Courier New"'>millivolts</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This value defaults to 3300 mV and is stored in flash and
affects all analog I/O pins.</p>

<h4>Examples</h4>

<p class=MsoNormal>See <a href="#_UART_I/O_Example">Analog I/O Example</a></p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801289">4.3.16<span
style='font:7.0pt "Times New Roman"'> </span>Servo I/O</a></h3>

<p class=MsoNormal><span style='color:red'>Please note that as of v1.84, the
units of servo output pins was changed from centi-milliseconds (cms) to
microseconds (us).</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Use the <b><span style='font-family:"Courier New"'>help pins</span></b>
command to see the list of MCU pin names and their servo capabilities.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A pin is configured for servo I/O, and a variable bound to
that pin, with the following statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>dim </span></b><i><span style='
font-family:"Courier New"'>varpin</span></i><b><span style='
font-family:"Courier New"'> as pin </span></b><i><span style='
font-family:"Courier New"'>pinname</span></i><b><span style='
font-family:"Courier New"'> for servo output</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If a pin is configured for servo output, then writing <i><span
style='font-family:"Courier New"'>varpin</span></i><b><span
style='font-family:"Courier New"'> </span></b>with a centi-millisecond
(cms, <span style='color:red'>v1.82-</span>) or microsecond (us, <span
style='color:red'>v1.84+</span>) value will set the servo output pin to the
specified pulse duration.  Reading the variable <i><span style='
font-family:"Courier New"'>varpin</span></i><b><span style='
font-family:"Courier New"'> </span></b>will return the output pulse duration,
in centi-milliseconds (cms, <span style='color:red'>v1.82-</span>) or
microseconds (us, <span style='color:red'>v1.84+</span>).  Note that the value
read is the actual value on the pin, and may be different from the most recent
value written, due to rounding.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The servo frequency may be displayed with the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>      servo</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Configure the servo frequency (in Hz) with the following
command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>      servo
</span></b><i><span style='font-family:"Courier New"'>Hz</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This takes effect after the next MCU reset.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This value defaults to 45 Hz and is stored in flash and
affects all servo I/O pins.</p>

<h4>Examples</h4>

<p class=MsoNormal>See <a href="#_Frequency_I/O_Example">Servo I/O Example</a></p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801290">4.3.17<span
style='font:7.0pt "Times New Roman"'> </span>Frequency I/O</a></h3>

<p class=MsoNormal>Use the <b><span style='font-family:"Courier New"'>help pins</span></b>
command to see the list of MCU pin names and their frequency capabilities.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A pin is configured for frequency I/O, and a variable bound
to that pin, with the following statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>dim </span></b><i><span style='
font-family:"Courier New"'>varpin</span></i><b><span style='
font-family:"Courier New"'> as pin </span></b><i><span style='
font-family:"Courier New"'>pinname</span></i><b><span style='
font-family:"Courier New"'> for frequency output</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If a pin is configured for frequency output, then writing <i><span
style='font-family:"Courier New"'>varpin</span></i><b><span
style='font-family:"Courier New"'> </span></b>with a hertz
(Hz) value will set the frequency output pin to the specified frequency. 
Reading the variable <i><span style='font-family:"Courier New"'>varpin</span></i><b><span
style='font-family:"Courier New"'> </span></b>will return the
output frequency, in hertz (Hz).  Note that the value read is the actual value
on the pin, and may be different from the most recent value written, due to
rounding.     </p>

<h4>Examples</h4>

<p class=MsoNormal>See <a href="#_Frequency_I/O_Example_">Frequency I/O Example</a></p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_UART_I/O"></a><a
name="_Toc306801291">4.3.18<span style='font:7.0pt "Times New Roman"'> </span>UART
I/O</a></h3>

<p class=MsoNormal>Use the <b><span style='font-family:"Courier New"'>help pins</span></b>
command to see the list of MCU pin names and their UART capabilities.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>UARTs can be configured for a specific serial communication
protocol and then used to transmit or receive serial data.  UARTs can also be
configured to generate interrupts when they receive or transmit a character (or
more specifically, when the uart receive buffers are not empty, or when the
uart transmit buffers are empty).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>UART serial communication protocols are configured with the
statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>configure
uart </span></b><i><span style='font-family:"Courier New"'>n</span></i><b><span
style='font-family:"Courier New"'> for </span></b><i><span
style='font-family:"Courier New"'>b</span></i><b><span
style='font-family:"Courier New"'> baud </span></b><i><span
style='font-family:"Courier New"'>d</span></i><b><span
style='font-family:"Courier New"'> data </span></b><span
style='font-family:"Courier New"'>(<b>even</b>|<b>odd</b>|<b>no</b>)<b>
parity</b></span></p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>configure
uart </span></b><i><span style='font-family:"Courier New"'>n</span></i><b><span
style='font-family:"Courier New"'> for </span></b><i><span
style='font-family:"Courier New"'>b</span></i><b><span
style='font-family:"Courier New"'> baud </span></b><i><span
style='font-family:"Courier New"'>d</span></i><b><span
style='font-family:"Courier New"'> data </span></b><span
style='font-family:"Courier New"'>(<b>even</b>|<b>odd</b>|<b>no</b>)<b>
parity loopback</b></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This configures uart <i><span style='
font-family:"Courier New"'>n</span></i> for <i><span style='
font-family:"Courier New"'>b</span></i> baud operation, with <i><span
style='font-family:"Courier New"'>d</span></i> data bits and
the specified parity; 2 stop bits are always transmitted and 1 stop bit is
received.  If the optional &quot;<b><span style='font-family:
"Courier New"'>loopback</span></b>&quot; parameter  is specified, the UART is
configured to loop all transmit data back into its own receiver, for testing
purposes.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Once the UART is configured, pin variables should be bound
to the specified UART's transmit and receive pins with one or more of the
following statements:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>      dim
</span></b><i><span style='font-family:"Courier New"'>varrx</span></i><b><span
style='font-family:"Courier New"'> as pin </span></b><i><span
style='font-family:"Courier New"'>pinname</span></i><b><span
style='font-family:"Courier New"'> for uart input</span></b></p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>      dim
</span></b><i><span style='font-family:"Courier New"'>vartx</span></i><b><span
style='font-family:"Courier New"'> as pin </span></b><i><span
style='font-family:"Courier New"'>pinname</span></i><b><span
style='font-family:"Courier New"'> for uart output</span></b></p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>&nbsp;</span></b></p>

<p class=MsoNormal>This binds the <i><span style='font-family:
"Courier New"'>varrx</span></i> variable to the specified UART's receive data
pin, and the <i><span style='font-family:"Courier New"'>vartx</span></i>
variable to the specified UART's transmit data pin.  From then on, receive data
can be examined by reading the <i><span style='font-family:
"Courier New"'>varrx</span></i> variable, and transmit data can be generated by
writing the <i><span style='font-family:"Courier New"'>vartx</span></i>
variable.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><i>Please note the pin variable method of accessing UART I/O
should not be used on PIC32, because the binding of PIC32 UARTs to port pins
changes magically as you move from part to part; instead, the statements below
should be used which will usurp the correct (unspecified) port pins for the
part.</i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Alternately, UART I/O can be performed explicitly with
statements which specifies the data variables (and implicitly, the data sizes)
to be transferred:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Courier New"'>      <b>uart
</b><i>n</i><b> write</b> <i>variable</i>, ...</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>      <b>uart
</b><i>n</i><b> read</b> <i>variable</i>, ...</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>During the UART read/write statements, the current value of
all variables, for their corresponding sizes (8 bits, 16 bits, or 32 bits) will
be shifted out (write) or shifted in (read).  If an array variable is
specified, its entire array contents are used.  <i>Note that a read of data
that is not available yet will block until the data is available, holding off
BASIC interrupt handlers; it is therefore best to read only one byte at a time,
after you have determined it is available.</i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>At this point, if desired, interrupt handlers can be set up
to handle UART receive and/or transmit interrupts.  UART receive interrupts are
delivered when the uart receive buffers are not empty; UART transmit interrupts
are delivered when the uart transmit buffers are empty.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The UART receive or transmit interrupt can be enabled, and
the statement(s) to execute when it is delivered specified, with the statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>      on
uart </span></b><i><span style='font-family:"Courier New"'>n</span></i><b><span
style='font-family:"Courier New"'> </span></b><span
style='font-family:"Courier New"'>(<b>input</b>|<b>output</b>)<b>
</b><i>statement</i></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal> If <i><span style='font-family:"Courier New"'>statement</span></i>
is a &quot;<b><span style='font-family:"Courier New"'>gosub </span></b><i><span
style='font-family:"Courier New"'>subname ...</span></i>&quot;,
then all of the statements in the corresponding sub are executed when the timer
interrupt is delivered; otherwise, just the single <i><span style='font-family:"Courier New"'>statement</span></i> is executed.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that an initial UART transmit interrupt is generated
when the transmit interrupt is enabled, since the uart transmit buffers are
empty!</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The UART receive or transmit interrupt can later be
completely ignored (i.e., discarded) with the statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>off uart </span></b><i><span style='
font-family:"Courier New"'>n</span></i><b><span style='
font-family:"Courier New"'> </span></b><span style='
font-family:"Courier New"'>(<b>input</b>|<b>output</b>)</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The UART receive or transmit interrupt can be temporarily
masked (i.e., held off but not discarded) with the statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>mask uart </span></b><i><span style='
font-family:"Courier New"'>n</span></i><b><span style='
font-family:"Courier New"'> </span></b><span style='
font-family:"Courier New"'>(<b>input</b>|<b>output</b>)</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>And can later be unmasked (i.e., any pending interrupts
delivered) with the statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>unmask uart </span></b><i><span style='font-family:"Courier New"'>n</span></i><b><span style='
font-family:"Courier New"'> </span></b><span style='
font-family:"Courier New"'>(<b>input</b>|<b>output</b>)</span></p>

<h4>Examples</h4>

<p class=MsoNormal>See <a href="#_UART_I/O_Example_">UART I/O Example</a></p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801292">4.3.19<span
style='font:7.0pt "Times New Roman"'> </span>I2C Master I/O</a></h3>

<p class=MsoNormal>Use the <b><span style='font-family:"Courier New"'>help pins</span></b>
command to see the list of MCU pin names and their I2C capabilities.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Unlike UART I/O, pin variables are not used for I2C I/O. 
Instead, there is an <b><span style='font-family:"Courier New"'>i2c</span></b>
statement which specifies the data variables (and implicitly, the data sizes)
to be transferred via I2C.  I2C transfers may be unidirectional (write or read)
or bidirectional (mixed in any combination).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>An I2C transaction is started and the I2C device is
addressed with the statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Courier New"'>      <b>i2c
start</b> <i>address</i></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Where <i><span style='font-family:"Courier New"'>address</span></i>
is the 7-bit I2C address of the device.  Note that an i2c address is in the
range 0 to 127 (or 0x7f).  If you have an address that is greater than 128 (or
0x80), that is actually the address shifted left by one bit, and so needs to be
shifted right by one bit (divided by 2) to obtain the real address.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Once the transaction is started, data can be written or read
with the statements:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Courier New"'>      <b>i2c
write</b> <i>variable</i>, ...</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>      <b>i2c
read</b> <i>variable</i>, ...</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>During the i2c read/write statements, the current value of
all variables, for their corresponding sizes (8 bits, 16 bits, or 32 bits) will
be shifted out (write) or shifted in (read).  If an array variable is
specified, its entire array contents are used.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Finally, the I2C transaction is completed with the
statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Courier New"'>      <b>i2c
stop</b></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that i2c statements can also be run in immediate mode,
allowing you to interactively discover the way your i2c peripherals work!!!</p>

<h4>Examples</h4>

<p class=MsoNormal>See <a href="#_Analog_I/O_Example">I2C Master I/O Example</a></p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801293">4.3.20<span
style='font:7.0pt "Times New Roman"'> </span>QSPI Master I/O</a></h3>

<p class=MsoNormal>Use the <b><span style='font-family:"Courier New"'>help pins</span></b>
command to see the list of MCU pin names and their QSPI capabilities.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Unlike UART I/O, pin variables are not used for QSPI I/O. 
Instead, there is a <b><span style='font-family:"Courier New"'>qspi</span></b>
statement which specifies the data variables (and implicitly, the data sizes)
to be transferred via QSPI.  QSPI transfers are always bidirectional -- the
current values of the variables are shifted out and new values are shifted in.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Data is transferred (again, bidirectionally) with a single
statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Courier New"'>      <b>qspi</b>
<i>variable</i>, ...</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The BASIC program is responsible for defining a chip select pin
as a digital output and asserting it prior to the qspi statement, and
deasserting it afterwards.  During the qspi statement, the current value of all
variables, for their corresponding sizes (8 bits, 16 bits, or 32 bits) will be
shifted out, and the new values for the same variables will be shifted in.  If
an array variable is specified, its entire array contents are used.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that qspi statements can also be run in immediate mode,
allowing you to interactively discover the way your qspi peripherals work!!!</p>

<h4>Examples</h4>

<p class=MsoNormal>See <a href="#_QSPI_Master_I/O_1">QSPI Master I/O Example</a></p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801294">4.3.21<span
style='font:7.0pt "Times New Roman"'> </span>Pin Interrupts</a></h3>

<p class=MsoNormal>StickOS can also support pin interrupts on any input (or
output, for that matter) pin thru the use of pin variables in the watchpoint
expression:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerparameterChar><span
style=''>line</span></span><span style=''> <span
class=ComputerentryChar>on</span> <span class=ComputerparameterChar>expression </span><span
class=ComputerentryChar>do </span><span class=ComputerparameterChar>statement</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The watchpoint expression is re-evaluated before every line
of the program is executed; if the expression transitions from false to true,
the watchpoint statement handler runs.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Since watchpoints have to transition from false to true, you
can think of them as an edge-sensitive interrupt on a digital input pin.  On an
analog input pin, you can think of then as detecting an edge at a specific
voltage level.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To set the smart watchpoint mode, which dramatically reduces
watchpoint overhead at a slight delay of input pin sensitivity, use the
command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>watchsmart</span></span><span style=''>
(<span class=ComputerentryChar>on</span>|<span class=ComputerentryChar>off</span>)</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To display the smart watchpoint mode, use the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>watchsmart</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>For the example below, the MCU sw1 should be pressed one or
more times after running the program.</p>

<h4>Examples</h4>

<p class=Computer>&gt; <span class=ComputerentryChar>10 dim switch as pin irq1*
for digital input</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>20 on ! switch do print
&quot;switch pressed!&quot;</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>30 sleep 1000 s</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>run</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>switch
pressed!</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>switch
pressed!</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>switch
pressed!</span></span></p>

<p class=Computer>&gt; _</p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801295"></a><a
name="_Toc294446458">4.3.22<span style='font:7.0pt "Times New Roman"'> </span>4x4
Scanned Keypad Support</a></h3>

<p class=MsoNormal><span style='color:red'>(v1.82+)</span> StickOS makes it
easy to interface to a scanned 4x4 keypad.  Using the &quot;pins&quot; command,
you can select 4 digital output pins for the keypad scan lines (kbd_s0-kbd_s3) and
4 digital input pins as the keypad return lines (kbd_r0-kbd_r3).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You can then set the keypad scan character codes for the 16
keypad buttons with the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>keychars</span></span><span style=''> <i>16-ascii-characters</i></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You can display the keypad scan character codes with the
command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>keychars</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>From then on, the most recent keypad character is available to
BASIC programs in the system variable &quot;keychar&quot;, which you will typically
use as &quot;keychar$&quot;.</p>

<b><span style='font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h4>Examples</h4>

<p class=Computer>&gt; <b>pins</b></p>

<p class=Computer>heartbeat pte6</p>

<p class=Computer>safemode* ptg0</p>

<p class=Computer>qspi_cs* pte7</p>

<p class=Computer>clone_rst* none</p>

<p class=Computer>zigflea_rst* none</p>

<p class=Computer>zigflea_attn* none</p>

<p class=Computer>zigflea_rxtxen none</p>

<p class=Computer>lcd_d4 pta2</p>

<p class=Computer>lcd_d5 pta3</p>

<p class=Computer>lcd_d6 pta4</p>

<p class=Computer>lcd_d7 pta5</p>

<p class=Computer>lcd_en pta1</p>

<p class=Computer>lcd_rs pta0</p>

<p class=Computer>kbd_s0 ptd4</p>

<p class=Computer>kbd_s1 ptd5</p>

<p class=Computer>kbd_s2 ptd6</p>

<p class=Computer>kbd_s3 ptd7</p>

<p class=Computer>kbd_r0 ptd0</p>

<p class=Computer>kbd_r1 ptd1</p>

<p class=Computer>kbd_r2 ptd2</p>

<p class=Computer>kbd_r3 ptd3</p>

<p class=Computer>&gt; <b>keychars</b></p>

<p class=Computer>123a456b789c*0#d</p>

<p class=Computer>&gt; <b>10 on keychar do print keychar$</b></p>

<p class=Computer>&gt; <b>20 halt</b></p>

<p class=Computer>&gt; <b>run</b></p>

<p class=Computer><b>1</b>1</p>

<p class=Computer><b>2</b>2</p>

<p class=Computer><b>3</b>3</p>

<p class=Computer><b>4</b>4</p>

<p class=Computer>STOP at line 20!</p>

<p class=Computer>&gt; _</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc294446459"></a><a
name="_Toc306801296">4.3.23<span style='font:7.0pt "Times New Roman"'> </span>HD44780-compatible
LCD Support</a></h3>

<p class=MsoNormal><span style='color:red'>(v1.82+)</span> StickOS makes it
easy to interface to a 4-bit LCD that is HD44780-compatible.  Using the
&quot;pins&quot; command, you can select 4 digital output pins for data bits
(lcd_d4-lcd_d7), and 2 more digital outputs for the enable and register select
control lines (lcd_en, lcd_rs).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You can then interface to the LCD using the lcd command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>lcd </span></b><i><span style='
font-family:"Courier New"'>pos</span></i><b><span style='
font-family:"Courier New"'>, </span></b><span style='
font-family:"Courier New"'>[<b>dec</b>|<b>hex</b>|<b>raw</b>]<b> </b><i>expression</i></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Or strings:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>lcd </span></b><i><span style='
font-family:"Courier New"'>pos</span></i><b><span style='
font-family:"Courier New"'>, </span></b><i><span style='
font-family:"Courier New"'>string</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Or various combinations of both.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Where <i><span style='font-family:"Courier New"'>pos</span></i>
is an LCD line number (0-3) or a LCD ram buffer position (0x80-0xff).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>See <a href="#_Print_Statements">Print Statements</a> for
more details.</p>

<h4>Examples</h4>

<p class=Computer>&gt;<span class=ComputerentryChar> pins</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>heartbeat
pte6</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>safemode*
ptg0</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>qspi_cs*
pte7</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>clone_rst*
none</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>zigflea_rst*
none</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>zigflea_attn*
none</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>zigflea_rxtxen
none</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>lcd_d4
pta2</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>lcd_d5
pta3</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>lcd_d6
pta4</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>lcd_d7
pta5</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>lcd_en
pta1</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>lcd_rs
pta0</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>kbd_s0
ptd4</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>kbd_s1
ptd5</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>kbd_s2
ptd6</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>kbd_s3
ptd7</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>kbd_r0
ptd0</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>kbd_r1
ptd1</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>kbd_r2
ptd2</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>kbd_r3
ptd3</span></span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;</span></span><span
class=ComputerentryChar> lcd 0, &quot;hello world!&quot;</span></p>

<p class=Computer><span class=ComputerentryChar><span style='font-weight:normal'>&gt;</span></span><b>
_</b></p>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801297">4.3.24<span
style='font:7.0pt "Times New Roman"'> </span>Other Statements</a></h3>

<p class=MsoNormal>You can delay program execution for a number of seconds,
milliseconds, or microseconds using the statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>sleep </span></b><i><span style='
font-family:"Courier New"'>expression </span></i><span style='
font-family:"Courier New"'>(<b>s</b>|<b>ms</b>|<b>us</b>)</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that the minimum sleep resolution is the clock tick,
which is 0.25 milliseconds.  Note also that in general it would be a bad idea
to use a <b><span style='font-family:"Courier New"'>sleep </span></b>statement
in the <b><span style='font-family:"Courier New"'>on</span></b>
handler for a timer or uart interrupt.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You can add remarks to the program, which have no impact on
program execution, with the statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>rem </span></b><i><span style='
font-family:"Courier New"'>remark</span></i></p>

<h4>Examples</h4>

<p class=Computer>&gt; <span class=ComputerentryChar>10 rem this program takes
5 seconds to run</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>20 sleep 5 s</span></p>

<p class=Computer>&gt; <span class=ComputerentryChar>run</span></p>

<p class=Computer>&gt; _</p>

<p class=MsoNormal>&nbsp;</p>

<b><i><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></i></b>

<h2><a name="_Toc306801298">4.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span>Performance</a></h2>

<p class=MsoNormal>StickOS typically runs about 1000 BASIC statements per
second <i>per processor MHz</i> (i.e., 50,000 lines/second on a 50MHz
processor).  Many issues affect performance, most notably the specific
statement mix.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>StickOS runs fastest when <i>not</i> merging program lines
from RAM and flash, so you should always <b><span style='font-family:"Courier New"'>save</span></b>
your program (causing RAM and flash program lines to be re-merged back to
flash) before running it.  It is also a good idea to <b><span style='font-family:
"Courier New"'>renumber</span></b> your program to ensure profile buckets are
evenly distributed to the lines of your program.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Once you have run a saved/renumbered program, you can use
the following command to list the time spent in each line of the program:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry><span style=''>      profile</span></p>

<p class=Computer style='margin-left:.5in'><b><span style=''>profile</span></b><span
class=ComputerparameterChar><span style=''> line</span></span></p>

<p class=Computer style='margin-left:.5in'><b><span style=''>profile<span
class=ComputerentryChar> -</span></span></b><span class=ComputerparameterChar><span
style=''>line</span></span></p>

<p class=Computer style='margin-left:.5in'><b><span style=''>profile</span></b><span
class=ComputerparameterChar><span style=''> line</span></span><span
class=ComputerentryChar><span style=''>-</span></span></p>

<p class=Computer style='margin-left:.5in'><b><span style=''>profile</span></b><span
class=ComputerparameterChar><span style=''> line</span></span><span
class=ComputerentryChar><span style=''>-</span></span><span
class=ComputerparameterChar><span style=''>line</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Alternately, you can list the time spent in an entire
subroutine by name with the command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><b><span style=''>profile</span></b><span
class=ComputerparameterChar><span style=''> subname</span></span></p>

<h4>Examples</h4>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>new</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;  
10 dim a, sum</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;  
20 for a = 1 to 10000</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;  
30   let sum = sum+a</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;  
40 next</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;  
50 print sum</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>save</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>run</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>50005000</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>profile</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>    
0ms    10 dim a, sum</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>   
22ms    20 for a = 1 to 10000</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  
315ms    30   let sum = sum+a</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>  
141ms    40 next</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>    
2ms    50 print sum</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>end</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;&nbsp;</span></p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h1><a name="_Toc306801299">5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>2.4GHz ZigFlea Wireless Operation</a></h1>

<h2><a name="_Toc306801300">5.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span>ZigFlea Configuration</a></h2>

<p class=MsoNormal>Prior to any wireless operation, each node needs to have a
unique zigflea nodeid set.  ZigFlea nodeid’s are integers from 0 to 65534.  The
zigflea nodeid is set with the following command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>nodeid </span></b><i><span style='
font-family:"Courier New"'>nodeid</span></i></p>

<h2><a name="_Toc306801301"></a><a name="_Zigbee_Remote_Control"></a>5.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>ZigFlea Remote
Control</h2>

<p class=MsoNormal>To connect to another MCU from the current one, use the
command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>&gt;
<b>connect </b><i>new-nodeid</i></span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>press
Ctrl-D to disconnect</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal>At that point you should press <b><span style='font-family:
"Courier New"'>&lt;Enter&gt;</span></b> to get a prompt from the remote MCU (or
press <b><span style='font-family:"Courier New"'>&lt;Ctrl-C&gt;</span></b> to
stop it if it is running a program), and verify its nodeid:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='font-family:"Courier New"'>&lt;Enter&gt;</span></b>
</p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>&gt;
<b>nodeid</b></span></p>

<p class=MsoNormal style='margin-left:.5in'><i><span style='font-family:"Courier New"'>new-nodeid</span></i><span
style='font-family:"Courier New"'> </span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>&gt;
_</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When you are done using the other MCU, press <b><span
style='font-family:"Courier New"'>&lt;Ctrl-D&gt;</span> </b>and the original MCU
will print the following message, followed by a prompt:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Courier New"'>      ...disconnected</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>It is always a good idea to re-verify its nodeid:</p>

<p class=MsoNormal><b>&nbsp;</b></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>&gt;
<b>nodeid</b></span></p>

<p class=MsoNormal style='margin-left:.5in'><i><span style='font-family:"Courier New"'>old-nodeid</span></i><span
style='font-family:"Courier New"'> </span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>&gt;
_</span></p>

<b><i><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></i></b>

<h2><a name="_Zigbee_Remote_Variables"></a><a name="_ZigFlea_Remote_Variables"></a><a
name="_Toc306801302">5.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span>ZigFlea Remote Variables</a></h2>

<p class=MsoNormal>A MCU can modify variables on a remote MCU using zigflea
remote variables.  A remote variable is declared with the statement:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><b><span style='
font-family:"Courier New"'>dim </span></b><i><span style='
font-family:"Courier New"'>varremote</span></i><b><span style='
font-family:"Courier New"'> as remote on nodeid </span></b><i><span
style='font-family:"Courier New"'>nodeid</span></i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This tells StickOS that the variable <i><span
style='font-family:"Courier New"'>varremote</span></i><b><span
style='font-family:"Courier New"'> </span></b>is actually
dimensioned on another node, <i><span style='font-family:"Courier New"'>nodeid</span></i>,
and any updates of that variable on this node should be forwarded to that other
node for processing.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When <i><span style='font-family:"Courier New"'>varremote</span></i><b><span
style='font-family:"Courier New"'> </span></b>is modified, the
request will be forwarded to the other nodeid; if the other nodeid does not
accept the request, <i><span style='font-family:"Courier New"'>varremote</span></i><b><span
style='font-family:"Courier New"'> </span></b>will be reset to
-1 instead.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The following example shows a remote LED dimmer, where the
potentiometer on nodeid 1 is used to control the LED on nodeid 2.</p>

<h4>Examples</h4>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>nodeid</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>1</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>10 dim potentiometer as pin an0 for analog input</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>20 dim led as remote on nodeid 2</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>30 while 1 do</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>40   let led = potentiometer</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>50   sleep 100 ms</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>60 endwhile</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>save</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>autorun on</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>connect 2</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>press
Ctrl-D to disconnect</span></p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>&lt;Enter&gt;</span></b></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>nodeid</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>2</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>10 dim led as pin dtin0 for analog output</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>20 while 1 do</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>30 endwhile</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>save</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>autorun on</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>run</b></span></p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'>&lt;Ctrl-D&gt;</span></b>
<span style='font-family:"Courier New"'>...disconnected</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>nodeid</b></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>1</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&gt;
<b>run</b></span></p>

<p class=MsoNormal><i><span style='font-family:"Courier New"'>now
adjust the potentiometer on nodeid 1</span></i></p>

<p class=MsoNormal><i><span style='font-family:"Courier New"'> 
and watch the LED change on nodeid 2!!!</span></i></p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h1><a name="_Toc306801303">6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Standalone Operation</a></h1>

<p class=MsoNormal>Once the MCU is disconnected from the host computer, it may
be run standalone.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Based on the “autorun” mode, when the MCU is powered up, it
will typically start running the (saved) BASIC program automatically.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Again, when the StickOS is running the “heartbeat” LED will
blink slowly; when the BASIC program in the MCU is running, the “heartbeat” LED
will blink quickly.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that any unsaved changes to the BASIC program will be
lost if the MCU is reset or loses power.</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h1><a name="_Toc306801304">7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Slave Operation</a></h1>

<p class=MsoNormal>Though this probably goes without saying, the MCU can also
be <i>permanently</i> connected to the host computer and used as a slave data
acquisition/control device, all under host computer software control!</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To do this, the host computer software program would simply
open the MCU virtual COM port or TCP/IP port and then write StickOS commands
and/or statements to it, and then read the results back from it.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Often it is useful to disable terminal echo and prompts when
running in slave mode.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To set the terminal echo and prompt modes, use the commands:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>echo</span></span><span style=''> (<span
class=ComputerentryChar>on</span>|<span class=ComputerentryChar>off</span>)</span></p>

<p class=Computer style='margin-left:.5in'><span class=ComputerentryChar><span
style=''>prompt</span></span><span style=''> (<span
class=ComputerentryChar>on</span>|<span class=ComputerentryChar>off</span>)</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To display the terminal echo and prompt modes, use the
commands:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computerentry style='margin-left:.5in'><span style=''>echo</span></p>

<p class=Computerentry style='margin-left:.5in'><span style=''>prompt</span></p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h1><a name="_Toc306801305">8<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>MCU Cloning</a></h1>

<p class=MsoNormal>A master MCU can clone its flash to a slave MCU, including
any BASIC programs and flash parameter values, by simply connecting the master MCU
to the slave MCU with the following cable:</p>

<p class=MsoNormal>&nbsp;</p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='margin-left:.5in;border-collapse:collapse'>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>master     </b></p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b>slave</b></p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>qspi_clk   </p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>qspi_clk (ezpck)</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>qspi_din   </p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>qspi_dout (ezpq)</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>qspi_dout  </p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>qspi_din (ezpd)</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>pins qspi_cs*   </p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>rcon* (ezpcs*)</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>pins qspi_rst*        </p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>rsti*</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>vss        </p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>vss</p>
  </td>
 </tr>
 <tr>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>vdd        </p>
  </td>
  <td valign=top style='padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>vdd</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>And then using the following command on the master MCU:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer>&gt; <span class=ComputerentryChar>clone</span></p>

<p class=Computer>Welcome to StickOS for Freescale MCF52221 v1.2!</p>

<p class=Computer>Copyright (c) 2008; all rights reserved.</p>

<p class=Computer>cloning... </p>

<p class=Computer>done!</p>

<p class=Computer>&gt; _</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Or if you want the slave MCU to start running immediately
following the clone procedure, use the following command instead:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=Computer>&gt; <span class=ComputerentryChar>clone run</span></p>

<p class=Computer>Welcome to StickOS for Freescale MCF52221 v1.2!</p>

<p class=Computer>Copyright (c) 2008; all rights reserved.</p>

<p class=Computer>cloning... </p>

<p class=Computer>done!</p>

<p class=Computer>&gt; _</p>

<h1><a name="_Toc306801306">9<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>MCU Downloading</a></h1>

<p class=MsoNormal>A master MCU can download a S19 or HEX file to a slave MCU
using the same connections as above, but replacing the &quot;clone&quot;
command with the &quot;download&quot; command followed by the slave operating
frequency, in Hz:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>&gt;
<b>download 8000000</b></span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>paste
S19 upgrade file now...</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>At that point you should paste the entire S19 upgrade file into
your terminal emulator.</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h1><a name="_Toc306801307">10<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span>MCU Upgrading</a></h1>

<p class=MsoNormal>Note that the upgrade procedure wipes out all BASIC programs
and parameters from flash memory.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A MCU’s StickOS firmware (i.e., the BASIC development
environment itself) can be upgraded with the following command:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>&gt;
<b>upgrade</b></span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>paste
S19 upgrade file now...</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>At that point you should paste the entire S19 upgrade file
into your terminal emulator.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When upgrade is nearly complete (about two minutes), you
will see:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>paste
done!</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>programming
flash...</span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>wait
for MCU heartbeat LED to blink!</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Then wait for the MCU “heartbeat” LED to blink, indicating flash
programming is complete; press the “Disconnect” button followed by the “Call”
button, to reconnect Hyper Terminal.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>After the upgrade, you must then update the StickOS pin assignments;
see First Boot &amp; Pin Assignments in both this User’s Guide and the CPUStick
User’s Guide, as appropriate.<b><i>  Until you update the StickOS pin assignments,
the heartbeat LED will not blink and zigflea will be unusable, but StickOS will
still be running, so you can connect the terminal emulator and make the necessary
pin assignment updates.</i></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that once flash programming begins, a failed (or
interrupted) upgrade procedure may only be able to be recovered via a re-clone
from a working MCU.</p>

<p class=MsoNormal>&nbsp;</p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h1><a name="_Toc306801308">11<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span>Appendix</a></h1>

<h2><a name="_Toc306801309">11.1StickOS Command Reference</a></h2>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801310">11.1.1<span
style='font:7.0pt "Times New Roman"'> </span>Commands</a></h3>

<p class=MsoNormal><span style='font-family:"Courier New"'>&lt;Ctrl-C&gt;                     
-- stop program</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>auto
&lt;line&gt;                   -- automatically number program lines</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>clear
[flash]                 -- clear ram [and flash] variables</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>cls                          
-- clear terminal screen</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>cont
[&lt;line&gt;]                 -- continue program from stop</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>delete
([&lt;line&gt;][-][&lt;line&gt;]|&lt;subname&gt;) -- delete program lines</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>download
&lt;slave Hz&gt;           -- download flash to slave MCU</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>dir                          
-- list saved programs</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>edit
&lt;line&gt;                   -- edit program line</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>help
[&lt;topic&gt;]                -- online help</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>list
([&lt;line&gt;][-][&lt;line&gt;]|&lt;subname&gt;) -- list program lines</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>load
&lt;name&gt;                   -- load saved program</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>memory                       
-- print memory usage</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>new                          
-- erase code ram and flash memories</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>profile
([&lt;line&gt;][-][&lt;line&gt;]|&lt;subname&gt;) -- display profile info</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>purge
&lt;name&gt;                  -- purge saved program</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>renumber
[&lt;line&gt;]             -- renumber program lines (and save)</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>reset
                        -- reset the MCU!</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>run
[&lt;line&gt;]                  -- run program</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>save
[&lt;name&gt;|library]         -- save code ram to flash memory</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>subs                         
-- list sub names</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>undo                         
-- undo code changes since last save</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>upgrade                      
-- upgrade StickOS firmware!</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>uptime                       
-- print time since last reset</span></p>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801311">11.1.2<span
style='font:7.0pt "Times New Roman"'> </span>Modes</a></h3>

<p class=MsoNormal><span style='font-family:"Courier New"'>analog
[&lt;millivolts&gt;]             -- set/display analog voltage scale</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>baud
[&lt;rate&gt;]                     -- set/display uart console baud rate</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>autorun
[on|off]                  -- autorun mode (on reset)</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>echo
[on|off]                     -- terminal echo mode</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>indent
[on|off]                   -- listing indent mode</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>keychars
[&lt;keychars&gt;]             -- set/display keypad scan chars</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>nodeid
[&lt;nodeid&gt;|none]            -- set/display zigflea nodeid</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>numbers
[on|off]                  -- listing line numbers mode</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>pins
[&lt;assign&gt; [&lt;pinname&gt;|none]]  -- set/display StickOS pin assignments</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>prompt
[on|off]                   -- terminal prompt mode</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>servo
[&lt;Hz&gt;]                      -- set/display servo Hz (on reset)</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>step
[on|off]                     -- debugger single-step mode</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>trace
[on|off]                    -- debugger trace mode</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>watchsmart
[on|off]               -- low-overhead watchpoint mode</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>pin
assignments:</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'> 
heartbeat  safemode*</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'> 
qspi_cs*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen</span></p>

<b><i><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></i></b>

<h2><a name="_Toc306801312">11.2BASIC Program Statement Reference</a></h2>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801313">11.2.1<span
style='font:7.0pt "Times New Roman"'> </span>Statements</a></h3>

<p class=Computer><span style=''>&lt;line&gt;                                
-- delete program line from code ram</span></p>

<p class=Computer><span style=''>&lt;line&gt;
&lt;statement&gt;                     -- enter program line into code ram</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>&lt;variable&gt;[$] =
&lt;expression&gt; [, ...]   -- assign variable</span></p>

<p class=Computer><span style=''>? [dec|hex|raw]
&lt;expression&gt; [, ...] [;] -- print results</span></p>

<p class=Computer><span style=''>assert
&lt;expression&gt;                    -- break if expression is false</span></p>

<p class=Computer><span style=''>data &lt;n&gt; [, ...]                       --
read-only data</span></p>

<p class=Computer><span style=''>dim &lt;variable&gt;[$][[n]]
[as ...] [, ...] -- dimension variables</span></p>

<p class=Computer><span style=''>end                                   
-- end program</span></p>

<p class=Computer><span style=''>halt                                  
-- loop forever</span></p>

<p class=Computer><span style=''>input [dec|hex|raw]
&lt;variable&gt;[$] [, ...] -- input data</span></p>

<p class=Computer><span style=''>label
&lt;label&gt;                          -- read/data label</span></p>

<p class=Computer><span style=''>lcd &lt;pos&gt;, [dec|hex|raw]
&lt;expression&gt; [, ...] [;] -- display results on lcd</span></p>

<p class=Computer><span style=''>let &lt;variable&gt;[$] =
&lt;expression&gt; [, ...] -- assign variable</span></p>

<p class=Computer><span style=''>print [dec|hex|raw]
&lt;expression&gt; [, ...] [;] -- print results</span></p>

<p class=Computer><span style=''>read &lt;variable&gt; [,
...]                -- read read-only data into variables</span></p>

<p class=Computer><span style=''>rem
&lt;remark&gt;                           -- remark</span></p>

<p class=Computer><span style=''>restore
[&lt;label&gt;]                      -- restore read-only data pointer</span></p>

<p class=Computer><span style=''>sleep &lt;expression&gt;
(s|ms|us)           -- delay program execution</span></p>

<p class=Computer><span style=''>stop                                  
-- insert breakpoint in code</span></p>

<p class=Computer><span style=''>vprint &lt;variable&gt;[$] =
[dec|hex|raw] &lt;expression&gt; [, ...] -- print to variable</span></p>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801314">11.2.2<span
style='font:7.0pt "Times New Roman"'> </span>Block Statements</a></h3>

<p class=Computer><span style=''>if &lt;expression&gt; then</span></p>

<p class=Computer><span style=''>[elseif &lt;expression&gt;
then]</span></p>

<p class=Computer><span style=''>[else]</span></p>

<p class=Computer><span style=''>endif</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>for &lt;variable&gt; =
&lt;expression&gt; to &lt;expression&gt; [step &lt;expression&gt;]</span></p>

<p class=Computer><span style=''>  [(break|continue) [n]]</span></p>

<p class=Computer><span style=''>next</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>while &lt;expression&gt; do</span></p>

<p class=Computer><span style=''>  [(break|continue) [n]]</span></p>

<p class=Computer><span style=''>endwhile</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>do</span></p>

<p class=Computer><span style=''>  [(break|continue) [n]]</span></p>

<p class=Computer><span style=''>until &lt;expression&gt;</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>gosub &lt;subname&gt;
[&lt;expression&gt;, ...]</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>sub &lt;subname&gt;
[&lt;param&gt;, ...]</span></p>

<p class=Computer><span style=''>  [return]</span></p>

<p class=Computer><span style=''>endsub</span></p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801315">11.2.3<span
style='font:7.0pt "Times New Roman"'> </span>Device Statements</a></h3>

<p class=Computer><span style=''>timers:</span></p>

<p class=Computer><span style=''>  configure timer &lt;n&gt; for
&lt;n&gt; (s|ms|us)</span></p>

<p class=Computer><span style=''>  on timer &lt;n&gt; do
&lt;statement&gt;                -- on timer execute statement</span></p>

<p class=Computer><span style=''>  off timer
&lt;n&gt;                              -- disable timer interrupt</span></p>

<p class=Computer><span style=''>  mask timer
&lt;n&gt;                             -- mask/hold timer interrupt</span></p>

<p class=Computer><span style=''>  unmask timer
&lt;n&gt;                           -- unmask timer interrupt</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>uarts:</span></p>

<p class=Computer><span style=''>  configure uart &lt;n&gt; for
&lt;n&gt; baud &lt;n&gt; data (even|odd|no) parity [loopback]</span></p>

<p class=Computer><span style=''>  on uart &lt;n&gt;
(input|output) do &lt;statement&gt;  -- on uart execute statement</span></p>

<p class=Computer><span style=''>  off uart &lt;n&gt;
(input|output)                -- disable uart interrupt</span></p>

<p class=Computer><span style=''>  mask uart &lt;n&gt;
(input|output)               -- mask/hold uart interrupt</span></p>

<p class=Computer><span style=''>  unmask uart &lt;n&gt;
(input|output)             -- unmask uart interrupt</span></p>

<p class=Computer><span style=''>  uart &lt;n&gt; (read|write)
&lt;variable&gt; [, ...]   -- perform uart I/O</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>i2c:</span></p>

<p class=Computer><span style=''>  i2c (start
&lt;addr&gt;|(read|write) &lt;variable&gt; [, ...]|stop) -- master i2c I/O</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>qspi:</span></p>

<p class=Computer><span style=''>  qspi &lt;variable&gt; [,
...]                    -- master qspi I/O</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>watchpoints:</span></p>

<p class=Computer><span style=''>  on &lt;expression&gt; do
&lt;statement&gt;             -- on expr execute statement</span></p>

<p class=Computer><span style=''>  off
&lt;expression&gt;                           -- disable expr watchpoint</span></p>

<p class=Computer><span style=''>  mask
&lt;expression&gt;                          -- mask/hold expr watchpoint</span></p>

<p class=Computer><span style=''>  unmask
&lt;expression&gt;                        -- unmask expr watchpoint</span></p>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801316">11.2.4<span
style='font:7.0pt "Times New Roman"'> </span>Expressions</a></h3>

<p class=Computer><span style=''>the following operators are
supported as in C,</span></p>

<p class=Computer><span style=''>in order of decreasing
precedence:</span></p>

<p class=Computer><span style=''> 
&lt;n&gt;                       -- decimal constant</span></p>

<p class=Computer><span style=''> 
0x&lt;n&gt;                     -- hexadecimal constant</span></p>

<p class=Computer><span style=''>  'c'                       --
character constant</span></p>

<p class=Computer><span style=''>  &lt;variable&gt;                --
simple variable</span></p>

<p class=Computer><span style=''> 
&lt;variable&gt;[&lt;expression&gt;]  -- array variable element</span></p>

<p class=Computer><span style=''> 
&lt;variable&gt;#               -- length of array or string</span></p>

<p class=Computer><span style=''>  (   )                     --
grouping</span></p>

<p class=Computer><span style=''>  !   ~                     --
logical not, bitwise not</span></p>

<p class=Computer><span style=''>  *   /   %                 --
times, divide, mod</span></p>

<p class=Computer><span style=''>  +   -                     --
plus, minus</span></p>

<p class=Computer><span style=''>  &gt;&gt; 
&lt;&lt;                    -- shift right, left</span></p>

<p class=Computer><span style=''>  &lt;=  &lt;  &gt;= 
&gt;              -- inequalities</span></p>

<p class=Computer><span style=''>  ==  !=                    --
equal, not equal</span></p>

<p class=Computer><span style=''>  |   ^   &amp;                
-- bitwise or, xor, and</span></p>

<p class=Computer><span style=''>  ||  ^^ 
&amp;&amp;                -- logical or, xor, and</span></p>

<b><span style='font-family:"Arial","sans-serif"'><br
clear=all style='page-break-before:always'>
</span></b>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801317">11.2.5<span
style='font:7.0pt "Times New Roman"'> </span>Strings</a></h3>

<p class=Computer><span style=''>v$ is a nul-terminated view
into a byte array v[]</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>string statements:</span></p>

<p class=Computer><span style=''>  dim, input, let, print,
vprint</span></p>

<p class=Computer><span style=''>  if &lt;expression&gt;
&lt;relation&gt; &lt;expression&gt; then</span></p>

<p class=Computer><span style=''>  while &lt;expression&gt;
&lt;relation&gt; &lt;expression&gt; do</span></p>

<p class=Computer><span style=''>  until &lt;expression&gt;
&lt;relation&gt; &lt;expression&gt; do</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>string expressions:</span></p>

<p class=Computer><span style=''> 
&quot;literal&quot;                      -- literal string</span></p>

<p class=Computer><span style=''> 
&lt;variable&gt;$                    -- variable string</span></p>

<p class=Computer><span style=''> 
&lt;variable&gt;$[&lt;start&gt;:&lt;length&gt;]  -- variable substring</span></p>

<p class=Computer><span style=''>  +                              --
concatenates strings</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>string relations:</span></p>

<p class=Computer><span style=''>  &lt;=  &lt;  &gt;= 
&gt;                   -- inequalities</span></p>

<p class=Computer><span style=''>  == 
!=                         -- equal, not equal</span></p>

<p class=Computer><span style=''>  ~ 
!~                          -- contains, does not contain</span></p>

<h3 style='margin-left:0in;text-indent:0in'><a name="_Toc306801318">11.2.6<span
style='font:7.0pt "Times New Roman"'> </span>Variables</a></h3>

<p class=Computer><span style=''>all variables must be dimensioned!</span></p>

<p class=Computer><span style=''>variables dimensioned in a sub
are local to that sub</span></p>

<p class=Computer><span style=''>simple variables are passed to
sub params by reference; otherwise, by value</span></p>

<p class=Computer><span style=''>array variable indices start at
0</span></p>

<p class=Computer><span style=''>v is the same as v[0], except
for input/print/i2c/qspi/uart statements</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>ram variables:</span></p>

<p class=Computer><span style=''>  dim &lt;var&gt;[$][[n]]</span></p>

<p class=Computer><span style=''>  dim &lt;var&gt;[[n]] as
(byte|short)</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>absolute variables:</span></p>

<p class=Computer><span style=''>  dim &lt;var&gt;[[n]] [as
(byte|short)] at address &lt;addr&gt;</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>flash parameter variables:</span></p>

<p class=Computer><span style=''>  dim &lt;varflash&gt;[[n]] as
flash</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>pin alias variables:</span></p>

<p class=Computer><span style=''>  dim &lt;varpin&gt; as pin
&lt;pinname&gt; for (digital|analog|servo|frequency|uart) \</span></p>

<p class=Computer><span style=''>                                     
(input|output) \</span></p>

<p class=Computer><span style=''>                                     
[debounced] [inverted] [open_drain]</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>system variables (read-only):</span></p>

<p class=Computer><span style=''>  analog  getchar  keychar  msecs 
nodeid</span></p>

<p class=Computer><span style=''>  random  seconds  ticks 
ticks_per_msec</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

<p class=Computer><span style=''>&nbsp;</span></p>

</div>

</body>

</html>
