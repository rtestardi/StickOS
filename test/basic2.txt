
### platform MCF52221 ###
... testing help
Welcome to StickOS for Freescale MCF52221 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help clone
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Freescale MCF52221 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
clone [run]                   -- clone flash to slave MCU [and run]
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
download <slave Hz>           -- download flash to slave MCU
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  clone_rst*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
    0         1         2         3        4     5        6        7
  --------  --------- --------- -------- ----- -------- -------- ------+
  an0       an1       an2       an3      an4   an5      an6      an7   | AN
  scl       sda                                                        | AS
            irq1*                        irq4*                   irq7* | NQ
  qspi_dout qspi_din  qspi_clk  qspi_cs0       qspi_cs2 qspi_cs3       | QS
  dtin0     dtin1     dtin2     dtin3                                  | TC
  utxd0     urxd0     urts0*    ucts0*                                 | UA
  utxd1     urxd1     urts1*    ucts1*                                 | UB

all pins support general purpose digital input/output
an? = potential analog input pins (mV)
dtin? = potential analog output (PWM) pins (mV)
dtin? = potential servo output (PWM) pins (us)
dtin? = potential frequency output pins (Hz)
urxd? = potential uart input pins (received byte)
utxd? = potential uart output pins (transmit byte)
       ^ - error
clone cable:
  master           slave
  ---------        ----------------
  qspi_clk         qspi_clk (ezpck)
  qspi_din         qspi_dout (ezpq)
  qspi_dout        qspi_din (ezpd)
  qspi_cs0         rcon* (ezpcs*)
  pins clone_rst*  rsti*
  vss              vss
  vdd              vdd
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  qspi_clk             spiclk
  qspi_din             miso
  qspi_dout            mosi
  irq4*                irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
         ^ - error
error -   ^
         ^ - error
error -   ^
error -   ^
         ^ - error
... testing pins
Welcome to StickOS for Freescale MCF52221 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat dtin3
safemode* irq1*
qspi_cs* qspi_cs0
clone_rst* scl
zigflea_rst* an2
zigflea_attn* an3
zigflea_rxtxen an5
lcd_d4 none
lcd_d5 none
lcd_d6 none
lcd_d7 none
lcd_en none
lcd_rs none
kbd_s0 none
kbd_s1 none
kbd_s2 none
kbd_s3 none
kbd_r0 none
kbd_r1 none
kbd_r2 none
kbd_r3 none
... testing jm commands
Welcome to StickOS for Freescale MCF52221 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Freescale MCF52221 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Freescale MCF52221 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform MCF52233 ###
... testing help
Welcome to StickOS for Freescale MCF52233 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help clone
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Freescale MCF52233 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
clone [run]                   -- clone flash to slave MCU [and run]
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
download <slave Hz>           -- download flash to slave MCU
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
ipaddress [dhcp|<ipaddress>]      -- set/display ip address
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  clone_rst*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
    0         1         2         3        4     5        6        7
  --------  --------- --------- -------- ----- -------- -------- ------+
  an0       an1       an2       an3      an4   an5      an6      an7   | AN
  scl       sda                                                        | AS
  gpt0      gpt1      gpt2      gpt3                                   | TA
            irq1*                        irq4*                   irq7* | NQ
                                irq11*                                 | GP
  qspi_dout qspi_din  qspi_clk  qspi_cs0       qspi_cs2 qspi_cs3       | QS
  dtin0     dtin1     dtin2     dtin3                                  | TC
  utxd0     urxd0     urts0*    ucts0*                                 | UA
  utxd1     urxd1     urts1*    ucts1*                                 | UB

all pins support general purpose digital input/output
an? = potential analog input pins (mV)
dtin?, gpt? = potential analog output (PWM) pins (mV)
dtin?, gpt? = potential servo output (PWM) pins (us)
dtin? = potential frequency output pins (Hz)
urxd? = potential uart input pins (received byte)
utxd? = potential uart output pins (transmit byte)
       ^ - error
clone cable:
  master           slave
  ---------        ----------------
  qspi_clk         qspi_clk (ezpck)
  qspi_din         qspi_dout (ezpq)
  qspi_dout        qspi_din (ezpd)
  qspi_cs0         rcon* (ezpcs*)
  pins clone_rst*  rsti*
  vss              vss
  vdd              vdd
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  qspi_clk             spiclk
  qspi_din             miso
  qspi_dout            mosi
  irq4*                irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
         ^ - error
error -   ^
         ^ - error
error -   ^
error -   ^
         ^ - error
... testing pins
Welcome to StickOS for Freescale MCF52233 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat dtin3
safemode* irq1*
qspi_cs* qspi_cs0
clone_rst* scl
zigflea_rst* gpt0
zigflea_attn* gpt1
zigflea_rxtxen an5
lcd_d4 none
lcd_d5 none
lcd_d6 none
lcd_d7 none
lcd_en none
lcd_rs none
kbd_s0 none
kbd_s1 none
kbd_s2 none
kbd_s3 none
kbd_r0 none
kbd_r1 none
kbd_r2 none
kbd_r3 none
... testing jm commands
Welcome to StickOS for Freescale MCF52233 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Freescale MCF52233 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
dhcp
1.2.3.4
dhcp
... testing reset
Welcome to StickOS for Freescale MCF52233 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform MCF52259 ###
... testing help
Welcome to StickOS for Freescale MCF52252 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help board
  help clone
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Freescale MCF52252 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
clone [run]                   -- clone flash to slave MCU [and run]
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
download <slave Hz>           -- download flash to slave MCU
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
usbhost [on|off]                  -- USB host mode (on reset)
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  clone_rst*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
    0         1         2         3        4     5        6        7
  --------  --------- --------- -------- ----- -------- -------- ------+
  an0       an1       an2       an3      an4   an5      an6      an7   | AN
  scl       sda                                                        | AS
  gpt0      gpt1      gpt2      gpt3                                   | TA
            irq1*               irq3*          irq5*             irq7* | NQ
  qspi_dout qspi_din  qspi_clk  qspi_cs0       qspi_cs2 qspi_cs3       | QS
  dtin0     dtin1     dtin2     dtin3                                  | TC
  utxd0     urxd0     urts0*    ucts0*                                 | UA
  utxd1     urxd1     urts1*    ucts1*                                 | UB
  fec_col   fec_crs   fec_rxclk fec_rxd[0-3]                  fec_rxdv | TI
  fec_rxer  fec_txclk fec_txd[0-3]                   fec_txen fec_txer | TJ
  utxd2     urxd2     urts2*    ucts2*                                 | UC

all pins support general purpose digital input/output
an? = potential analog input pins (mV)
dtin?, gpt? = potential analog output (PWM) pins (mV)
dtin?, gpt? = potential servo output (PWM) pins (us)
dtin? = potential frequency output pins (Hz)
urxd? = potential uart input pins (received byte)
utxd? = potential uart output pins (transmit byte)
1  2  3  4  5  6  7  8  9  10 11 12    1  2  3  4  5  6  7  8  9  10 11 12

g  +  q  q  q  q  r  r  q  q  r  v     u  u  u  u  g  g  g  g  i  i  i  i
n  3  s  s  s  s  c  s  s  s  s  b     t  r  r  c  p  p  p  p  r  r  r  r
d  V  p  p  p  p  o  t  p  p  t  u     x  x  t  t  t  t  t  t  q  q  q  q
      i  i  i  i  n  i  i  i  o  s     d  d  s  s  0  1  2  3  1  3  5  7
      _  _  _  _  *  n  _  _  u        2  2  2  2              *  *  *  *
      c  d  d  c     *  c  c  t              *  *                        
      l  o  i  s        s  s  *                                          
      k  u  n  0        2  3                                             
         t                                                               

antenna                            MCU                                USB


      u  u        u  u                                                   
u  u  r  c  u  u  r  c  d  d  d  d                                       
t  r  t  t  t  r  t  t  t  t  t  t                                       
x  x  s  s  x  x  s  s  i  i  i  i     g  +  s  s  a  a  a  a  a  a  a  a
d  d  0  0  d  d  1  1  n  n  n  n     n  3  c  d  n  n  n  n  n  n  n  n
0  0  *  *  1  1  *  *  0  1  2  3     d  V  l  a  0  1  2  3  4  5  6  7

1  2  3  4  5  6  7  8  9  10 11 12    1  2  3  4  5  6  7  8  9  10 11 12
clone cable:
  master           slave
  ---------        ----------------
  qspi_clk         qspi_clk (ezpck)
  qspi_din         qspi_dout (ezpq)
  qspi_dout        qspi_din (ezpd)
  qspi_cs0         rcon* (ezpcs*)
  pins clone_rst*  rsti*
  vss              vss
  vdd              vdd
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  qspi_clk             spiclk
  qspi_din             miso
  qspi_dout            mosi
  irq1*                irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
off
on
error -   ^
error -       ^
on
... testing pins
Welcome to StickOS for Freescale MCF52252 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat dtin3
safemode* irq5*
qspi_cs* qspi_cs0
clone_rst* scl
zigflea_rst* an2
zigflea_attn* an3
zigflea_rxtxen an5
lcd_d4 none
lcd_d5 none
lcd_d6 none
lcd_d7 none
lcd_en none
lcd_rs none
kbd_s0 none
kbd_s1 none
kbd_s2 none
kbd_s3 none
kbd_r0 none
kbd_r1 none
kbd_r2 none
kbd_r3 none
... testing jm commands
Welcome to StickOS for Freescale MCF52252 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Freescale MCF52252 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Freescale MCF52252 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform MCF5211 ###
... testing help
Welcome to StickOS for Freescale MCF5211 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help clone
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Freescale MCF5211 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
clone [run]                   -- clone flash to slave MCU [and run]
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
download <slave Hz>           -- download flash to slave MCU
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  clone_rst*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
    0         1         2         3        4     5        6        7
  --------  --------- --------- -------- ----- -------- -------- ------+
  an0       an1       an2       an3      an4   an5      an6      an7   | AN
  scl       sda                                                        | AS
  gpt0      gpt1      gpt2      gpt3                                   | TA
            irq1*                        irq4*                   irq7* | NQ
  qspi_dout qspi_din  qspi_clk  qspi_cs0       qspi_cs2 qspi_cs3       | QS
  dtin0     dtin1     dtin2     dtin3                                  | TC
  utxd0     urxd0     urts0*    ucts0*                                 | UA
  utxd1     urxd1     urts1*    ucts1*                                 | UB

all pins support general purpose digital input/output
an? = potential analog input pins (mV)
dtin?, gpt? = potential analog output (PWM) pins (mV)
dtin?, gpt? = potential servo output (PWM) pins (us)
dtin? = potential frequency output pins (Hz)
urxd? = potential uart input pins (received byte)
utxd? = potential uart output pins (transmit byte)
       ^ - error
clone cable:
  master           slave
  ---------        ----------------
  qspi_clk         qspi_clk (ezpck)
  qspi_din         qspi_dout (ezpq)
  qspi_dout        qspi_din (ezpd)
  qspi_cs0         rcon* (ezpcs*)
  pins clone_rst*  rsti*
  vss              vss
  vdd              vdd
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  qspi_clk             spiclk
  qspi_din             miso
  qspi_dout            mosi
  irq4*                irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
         ^ - error
error -   ^
         ^ - error
error -   ^
error -   ^
         ^ - error
... testing pins
Welcome to StickOS for Freescale MCF5211 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat dtin3
safemode* irq4*
qspi_cs* qspi_cs0
clone_rst* scl
zigflea_rst* gpt0
zigflea_attn* gpt1
zigflea_rxtxen an5
lcd_d4 none
lcd_d5 none
lcd_d6 none
lcd_d7 none
lcd_en none
lcd_rs none
kbd_s0 none
kbd_s1 none
kbd_s2 none
kbd_s3 none
kbd_r0 none
kbd_r1 none
kbd_r2 none
kbd_r3 none
... testing jm commands
Welcome to StickOS for Freescale MCF5211 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Freescale MCF5211 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Freescale MCF5211 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform MCF51JM128 ###
... testing help
Welcome to StickOS for Freescale MCF51JM128 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Freescale MCF51JM128 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
download <slave Hz>           -- download flash to slave MCU
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
    0       1       2       3       4       5       6       7
  ------- ------- ------- ------- ------- ------- ------- --------+
  pta0    pta1    pta2    pta3    pta4    pta5                    | PORT A
  ptb0    ptb1    ptb2    ptb3    ptb4    ptb5    ptb6    ptb7    | PORT B
  ptc0    ptc1    ptc2    ptc3    ptc4    ptc5    ptc6            | PORT C
  ptd0    ptd1    ptd2    ptd3    ptd4    ptd5    ptd6    ptd7    | PORT D
  pte0    pte1    pte2    pte3    pte4    pte5    pte6    pte7    | PORT E
  ptf0    ptf1    ptf2    ptf3    ptf4    ptf5    ptf6    ptf7    | PORT F
  ptg0    ptg1    ptg2    ptg3                                    | PORT G

all pins support general purpose digital input/output
ptb?, ptd[0134] = potential analog input pins (mV)
pte[23], ptf[0-5] = potential analog output (PWM) pins (mV)
pte[23], ptf[0-5] = potential servo output (PWM) pins (us)
pte[23], ptf[0-5] = potential frequency output pins (Hz)
pte1 (u1), ptc5 (u2) = potential uart input pins (received byte)
pte0 (u1), ptc3 (u2) = potential uart output pins (transmit byte)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  spsck1 (pte6)        spiclk
  miso1 (pte4)         miso
  mosi1 (pte5)         mosi
  irq*                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
         ^ - error
error -   ^
         ^ - error
error -   ^
error -   ^
         ^ - error
... testing pins
Welcome to StickOS for Freescale MCF51JM128 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat ptf0
safemode* ptg0
qspi_cs* pte7
clone_rst* none
zigflea_rst* pte2
zigflea_attn* pte3
zigflea_rxtxen ptb5
lcd_d4 none
lcd_d5 none
lcd_d6 none
lcd_d7 none
lcd_en none
lcd_rs none
kbd_s0 none
kbd_s1 none
kbd_s2 none
kbd_s3 none
kbd_r0 none
kbd_r1 none
kbd_r2 none
kbd_r3 none
... testing jm commands
Welcome to StickOS for Freescale MCF51JM128 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Freescale MCF51JM128 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Freescale MCF51JM128 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform FB32 ###
... testing help
Welcome to StickOS for Freescale MCF51JM128 Firebird32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Freescale MCF51JM128 Firebird32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
download <slave Hz>           -- download flash to slave MCU
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
  a0-a7, 0-13
  pta[0-5], ptc[0-1,3-6], ptd[0,3-7], pte7, ptf[5,7], ptg[0-2]

peripherals:
  switch                 ptg0
  buzzer                 ptf5
  rgb anode (+)          ptg1
  rgb red cathode (-)    5 (pte3)
  rgb green cathode (-)  3 (pte2)
  rgb blue cathode (-)   9 (ptf1)
  eeprom write protect   ptg2

jumpers:
  d6=pwm, d10=pwm

all pins support general purpose digital input/output
a? = potential analog input pins (mV)
3,5,6,8,9,10,11 = potential analog output (PWM) pins (mV)
3,5,6,8,9,10,11 = potential servo output (PWM) pins (us)
3,5,6,8,9,10,11 = potential frequency output pins (Hz)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  spsck1 (pte6)        spiclk
  miso1 (pte4)         miso
  mosi1 (pte5)         mosi
  irq*                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
         ^ - error
error -   ^
         ^ - error
error -   ^
error -   ^
         ^ - error
... testing pins
Welcome to StickOS for Freescale MCF51JM128 Firebird32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat 13
safemode* ptg0
qspi_cs* pte7
clone_rst* none
zigflea_rst* none
zigflea_attn* none
zigflea_rxtxen none
lcd_d4 pta2
lcd_d5 pta3
lcd_d6 pta4
lcd_d7 pta5
lcd_en pta1
lcd_rs pta0
kbd_s0 ptd4
kbd_s1 ptd5
kbd_s2 ptd6
kbd_s3 ptd7
kbd_r0 ptd0
kbd_r1 7
kbd_r2 4
kbd_r3 ptd3
... testing jm commands
Welcome to StickOS for Freescale MCF51JM128 Firebird32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Freescale MCF51JM128 Firebird32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Freescale MCF51JM128 Firebird32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform FB32LITE ###
... testing help
Welcome to StickOS for Freescale MCF51JM128 Firebird32-lite v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Freescale MCF51JM128 Firebird32-lite v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
download <slave Hz>           -- download flash to slave MCU
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
    0       1       2       3       4       5       6       7
  ------- ------- ------- ------- ------- ------- ------- --------+
  pta0    pta1    pta2    pta3    pta4    pta5                    | PORT A
  ptb0    ptb1    ptb2    ptb3    ptb4    ptb5    ptb6    ptb7    | PORT B
  ptc0    ptc1    ptc2    ptc3    ptc4    ptc5    ptc6            | PORT C
  ptd0    ptd1    ptd2    ptd3    ptd4    ptd5    ptd6    ptd7    | PORT D
  pte0    pte1    pte2    pte3    pte4    pte5    pte6    pte7    | PORT E
  ptf0    ptf1    ptf2    ptf3    ptf4    ptf5    ptf6    ptf7    | PORT F
  ptg0    ptg1    ptg2    ptg3                                    | PORT G

all pins support general purpose digital input/output
ptb?, ptd[0134] = potential analog input pins (mV)
pte[23], ptf[0-5] = potential analog output (PWM) pins (mV)
pte[23], ptf[0-5] = potential servo output (PWM) pins (us)
pte[23], ptf[0-5] = potential frequency output pins (Hz)
pte1 (u1), ptc5 (u2) = potential uart input pins (received byte)
pte0 (u1), ptc3 (u2) = potential uart output pins (transmit byte)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  spsck1 (pte6)        spiclk
  miso1 (pte4)         miso
  mosi1 (pte5)         mosi
  irq*                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
         ^ - error
error -   ^
         ^ - error
error -   ^
error -   ^
         ^ - error
... testing pins
Welcome to StickOS for Freescale MCF51JM128 Firebird32-lite v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat pte6
safemode* ptg0
qspi_cs* pte7
clone_rst* none
zigflea_rst* none
zigflea_attn* none
zigflea_rxtxen none
lcd_d4 pta2
lcd_d5 pta3
lcd_d6 pta4
lcd_d7 pta5
lcd_en pta1
lcd_rs pta0
kbd_s0 ptd4
kbd_s1 ptd5
kbd_s2 ptd6
kbd_s3 ptd7
kbd_r0 ptd0
kbd_r1 ptd1
kbd_r2 ptd2
kbd_r3 ptd3
... testing jm commands
Welcome to StickOS for Freescale MCF51JM128 Firebird32-lite v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Freescale MCF51JM128 Firebird32-lite v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Freescale MCF51JM128 Firebird32-lite v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform MCF51CN128 ###
... testing help
Welcome to StickOS for Freescale MCF51CN128 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Freescale MCF51CN128 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
download <slave Hz>           -- download flash to slave MCU
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
    0       1       2       3       4       5       6       7
  ------- ------- ------- ------- ------- ------- ------- --------+
  pta0    pta1    pta2    pta3    pta4    pta5    pta6    pta7    | PORT A
  ptb0    ptb1    ptb2    ptb3    ptb4    ptb5    ptb6    ptb7    | PORT B
  ptc0    ptc1    ptc2            ptc4    ptc5    ptc6    ptc7    | PORT C
  ptd0    ptd1    ptd2    ptd3                    ptd6    ptd7    | PORT D
  pte0    pte1    pte2    pte3    pte4    pte5    pte6    pte7    | PORT E
  ptf0    ptf1    ptf2    ptf3    ptf4    ptf5    ptf6    ptf7    | PORT F
  ptg0    ptg1    ptg2    ptg3    ptg4    ptg5    ptg6    ptg7    | PORT G
  pth0    pth1    pth2    pth3    pth4    pth5    pth6    pth7    | PORT H
  ptj0    ptj1    ptj2    ptj3    ptj4    ptj5                    | PORT J

all pins support general purpose digital input/output
ptc[4-7], ptd[0-37], pte[0-2] = potential analog input pins (mV)
ptb[67], ptc0, pte[3-5] = potential analog output (PWM) pins (mV)
ptb[67], ptc0, pte[3-5] = potential servo output (PWM) pins (us)
ptb[67], ptc0, pte[3-5] = potential frequency output pins (Hz)
ptd1 (u1), ptd3 (u2), pta4 (u3) = potential uart input pins (received byte)
ptd0 (u1), ptd2 (u2), pta3 (u3) = potential uart output pins (transmit byte)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  spsck1 (ptb5)        spiclk
  miso1 (ptb4)         miso
  mosi1 (ptb3)         mosi
  irq* (ptc4)          irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
         ^ - error
error -   ^
         ^ - error
error -   ^
error -   ^
         ^ - error
... testing pins
Welcome to StickOS for Freescale MCF51CN128 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat pte3
safemode* ptg6
qspi_cs* ptf0
clone_rst* none
zigflea_rst* ptf1
zigflea_attn* ptf2
zigflea_rxtxen ptf3
lcd_d4 none
lcd_d5 none
lcd_d6 none
lcd_d7 none
lcd_en none
lcd_rs none
kbd_s0 none
kbd_s1 none
kbd_s2 none
kbd_s3 none
kbd_r0 none
kbd_r1 none
kbd_r2 none
kbd_r3 none
... testing jm commands
Welcome to StickOS for Freescale MCF51CN128 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Freescale MCF51CN128 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Freescale MCF51CN128 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform MCF51QE128 ###
... testing help
Welcome to StickOS for Freescale MCF51QE128 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Freescale MCF51QE128 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
download <slave Hz>           -- download flash to slave MCU
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
    0       1       2       3       4       5       6       7
  ------- ------- ------- ------- ------- ------- ------- --------+
  pta0    pta1    pta2    pta3    pta4    pta5    pta6    pta7    | PORT A
  ptb0    ptb1    ptb2    ptb3    ptb4    ptb5    ptb6    ptb7    | PORT B
  ptc0    ptc1    ptc2    ptc3    ptc4    ptc5    ptc6    ptc7    | PORT C
  ptd0    ptd1    ptd2    ptd3    ptd4    ptd5    ptd6    ptd7    | PORT D
  pte0    pte1    pte2    pte3    pte4    pte5    pte6    pte7    | PORT E
  ptf0    ptf1    ptf2    ptf3    ptf4    ptf5    ptf6    ptf7    | PORT F
  ptg0    ptg1    ptg2    ptg3                                    | PORT G

all pins support general purpose digital input/output
pta[0-367], ptb[0-3], ptf[0-7], ptg[23] = potential analog input pins (mV)
pta[0167], ptb[45], ptc[0-5] = potential analog output (PWM) pins (mV)
pta[0167], ptb[45], ptc[0-5] = potential servo output (PWM) pins (us)
pta[0167], ptb[45], ptc[0-5] = potential frequency output pins (Hz)
ptb0 (u1), ptc6 (u2) = potential uart input pins (received byte)
ptb1 (u1), ptc7 (u2) = potential uart output pins (transmit byte)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  spsck1 (ptb2)        spiclk
  miso1 (ptb4)         miso
  mosi1 (ptb3)         mosi
  irq*                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
         ^ - error
error -   ^
         ^ - error
error -   ^
error -   ^
         ^ - error
... testing pins
Welcome to StickOS for Freescale MCF51QE128 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat ptc2
safemode* pta2
qspi_cs* ptb5
clone_rst* none
zigflea_rst* ptc0
zigflea_attn* ptc1
zigflea_rxtxen ptf1
lcd_d4 none
lcd_d5 none
lcd_d6 none
lcd_d7 none
lcd_en none
lcd_rs none
kbd_s0 none
kbd_s1 none
kbd_s2 none
kbd_s3 none
kbd_r0 none
kbd_r1 none
kbd_r2 none
kbd_r3 none
... testing jm commands
Welcome to StickOS for Freescale MCF51QE128 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Freescale MCF51QE128 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Freescale MCF51QE128 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform BADGE_BOARD ###
... testing help
Welcome to StickOS for Freescale MCF51JM128 BadgeBoard v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Freescale MCF51JM128 BadgeBoard v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
download <slave Hz>           -- download flash to slave MCU
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
jm(clear|set) <r>, <c>                 -- clear/set row/column of LED matrix
jmscroll ...                           -- scroll printout to LED matrix
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
    0       1       2       3       4       5       6       7
  ------- ------- ------- ------- ------- ------- ------- --------+
  pta0    pta1    pta2    pta3    pta4    pta5                    | PORT A
  ptb0    ptb1    ptb2    ptb3    ptb4    ptb5    ptb6    ptb7    | PORT B
  ptc0    ptc1    ptc2    ptc3    ptc4    ptc5    ptc6            | PORT C
  ptd0    ptd1    ptd2    ptd3    ptd4    ptd5    ptd6    ptd7    | PORT D
  pte0    pte1    pte2    pte3    pte4    pte5    pte6    pte7    | PORT E
  ptf0    ptf1    ptf2    ptf3    ptf4    ptf5    ptf6    ptf7    | PORT F
  ptg0    ptg1    ptg2    ptg3                                    | PORT G

all pins support general purpose digital input/output
ptb?, ptd[0134] = potential analog input pins (mV)
pte[23], ptf[0-5] = potential analog output (PWM) pins (mV)
pte[23], ptf[0-5] = potential servo output (PWM) pins (us)
pte[23], ptf[0-5] = potential frequency output pins (Hz)
pte1 (u1), ptc5 (u2) = potential uart input pins (received byte)
pte0 (u1), ptc3 (u2) = potential uart output pins (transmit byte)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  spsck1 (pte6)        spiclk
  miso1 (pte4)         miso
  mosi1 (pte5)         mosi
  irq*                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
         ^ - error
error -   ^
         ^ - error
error -   ^
error -   ^
         ^ - error
... testing pins
Welcome to StickOS for Freescale MCF51JM128 BadgeBoard v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat ptf0
safemode* ptg0
qspi_cs* pte7
clone_rst* none
zigflea_rst* pte2
zigflea_attn* pte3
zigflea_rxtxen ptb5
... testing jm commands
Welcome to StickOS for Freescale MCF51JM128 BadgeBoard v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -               ^
error -      ^
error -       ^
error -        ^
error -         ^
  10 jmscroll "hello"
  20 jmset 1, 2
  30 jmclear 3, 4
end
hello
... testing ipaddress
Welcome to StickOS for Freescale MCF51JM128 BadgeBoard v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Freescale MCF51JM128 BadgeBoard v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform 512HBL ###
... testing help
Welcome to StickOS for Microchip PIC32MX4-F512H CUI32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Microchip PIC32MX4-F512H CUI32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
usbhost [on|off]                  -- USB host mode (on reset)
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
  0/8     1/9     2/10    3/11    4/12    5/13    6/14    7/15
  ------- ------- ------- ------- ------- ------- ------- --------+
  an0     an1     an2     an3     an4     an5     an6     an7     | PORT B
  an8     an9     an10    an11    an12    an13    an14    an15    |      B+8
          rc1     rc2     rc3     rc4                             | PORT C
                                  rc12    rc13    rc14    rc15    |      C+8
  rd0     rd1     rd2     rd3     rd4     rd5     rd6     rd7     | PORT D
  rd8     rd9     rd10    rd11    rd12    rd13    rd14    rd15    |      D+8
  re0     re1     re2     re3     re4     re5     re6     re7     | PORT E
  re8     re9                                                     |      E+8
  rf0     rf1     rf2     rf3     rf4     rf5                     | PORT F
  rf8                             rf12    rf13                    |      F+8
  rg0     rg1     rg2     rg3                     rg6     rg7     | PORT G
  rg8     rg9                     rg12    rg13    rg14    rg15    |      G+8

all pins support general purpose digital input/output
an? = potential analog input pins (mV)
rd[0-4] = potential analog output (PWM) pins (mV)
rd[0-4] = potential servo output (PWM) pins (us)
rd[0-4] = potential frequency output pins (Hz)
rf4 (u2) = potential uart input pins (received byte)
rf5 (u2) = potential uart output pins (transmit byte)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  sck1                 spiclk
  sdi1                 miso
  sdo1                 mosi
  int1                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
off
on
error -   ^
error -       ^
on
... testing pins
Welcome to StickOS for Microchip PIC32MX4-F512H CUI32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat re0
safemode* re6
qspi_cs* re1
clone_rst* none
zigflea_rst* re2
zigflea_attn* re3
zigflea_rxtxen re4
lcd_d4 none
lcd_d5 none
lcd_d6 none
lcd_d7 none
lcd_en none
lcd_rs none
kbd_s0 none
kbd_s1 none
kbd_s2 none
kbd_s3 none
kbd_r0 none
kbd_r1 none
kbd_r2 none
kbd_r3 none
... testing jm commands
Welcome to StickOS for Microchip PIC32MX4-F512H CUI32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Microchip PIC32MX4-F512H CUI32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Microchip PIC32MX4-F512H CUI32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform 512H ###
... testing help
Welcome to StickOS for Microchip PIC32MXx-F512H v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Microchip PIC32MXx-F512H v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
usbhost [on|off]                  -- USB host mode (on reset)
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
  0/8     1/9     2/10    3/11    4/12    5/13    6/14    7/15
  ------- ------- ------- ------- ------- ------- ------- --------+
  an0     an1     an2     an3     an4     an5     an6     an7     | PORT B
  an8     an9     an10    an11    an12    an13    an14    an15    |      B+8
          rc1     rc2     rc3     rc4                             | PORT C
                                  rc12    rc13    rc14    rc15    |      C+8
  rd0     rd1     rd2     rd3     rd4     rd5     rd6     rd7     | PORT D
  rd8     rd9     rd10    rd11    rd12    rd13    rd14    rd15    |      D+8
  re0     re1     re2     re3     re4     re5     re6     re7     | PORT E
  re8     re9                                                     |      E+8
  rf0     rf1     rf2     rf3     rf4     rf5                     | PORT F
  rf8                             rf12    rf13                    |      F+8
  rg0     rg1     rg2     rg3                     rg6     rg7     | PORT G
  rg8     rg9                     rg12    rg13    rg14    rg15    |      G+8

all pins support general purpose digital input/output
an? = potential analog input pins (mV)
rd[0-4] = potential analog output (PWM) pins (mV)
rd[0-4] = potential servo output (PWM) pins (us)
rd[0-4] = potential frequency output pins (Hz)
rf4 (u2) = potential uart input pins (received byte)
rf5 (u2) = potential uart output pins (transmit byte)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  sck1                 spiclk
  sdi1                 miso
  sdo1                 mosi
  int1                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
off
on
error -   ^
error -       ^
on
... testing pins
Welcome to StickOS for Microchip PIC32MXx-F512H v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat re0
safemode* re6
qspi_cs* re1
clone_rst* none
zigflea_rst* re2
zigflea_attn* re3
zigflea_rxtxen re4
lcd_d4 none
lcd_d5 none
lcd_d6 none
lcd_d7 none
lcd_en none
lcd_rs none
kbd_s0 none
kbd_s1 none
kbd_s2 none
kbd_s3 none
kbd_r0 none
kbd_r1 none
kbd_r2 none
kbd_r3 none
... testing jm commands
Welcome to StickOS for Microchip PIC32MXx-F512H v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Microchip PIC32MXx-F512H v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Microchip PIC32MXx-F512H v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform 512LBL ###
... testing help
Welcome to StickOS for Microchip PIC32MXx-F512L UBW32v1 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Microchip PIC32MXx-F512L UBW32v1 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
usbhost [on|off]                  -- USB host mode (on reset)
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
  0/8     1/9     2/10    3/11    4/12    5/13    6/14    7/15
  ------- ------- ------- ------- ------- ------- ------- --------+
  ra0     ra1     ra2     ra3     ra4     ra5     ra6     ra7     | PORT A
          ra9     ra10                            ra14    ra15    |      A+8
  an0     an1     an2     an3     an4     an5     an6     an7     | PORT B
  an8     an9     an10    an11    an12    an13    an14    an15    |      B+8
          rc1     rc2     rc3     rc4                             | PORT C
                                  rc12    rc13    rc14    rc15    |      C+8
  rd0     rd1     rd2     rd3     rd4     rd5     rd6     rd7     | PORT D
  rd8     rd9     rd10    rd11    rd12    rd13    rd14    rd15    |      D+8
  re0     re1     re2     re3     re4     re5     re6     re7     | PORT E
  re8     re9                                                     |      E+8
  rf0     rf1     rf2     rf3     rf4     rf5                     | PORT F
  rf8                             rf12    rf13                    |      F+8
  rg0     rg1     rg2     rg3                     rg6     rg7     | PORT G
  rg8     rg9                     rg12    rg13    rg14    rg15    |      G+8

all pins support general purpose digital input/output
an? = potential analog input pins (mV)
rd[0-4] = potential analog output (PWM) pins (mV)
rd[0-4] = potential servo output (PWM) pins (us)
rd[0-4] = potential frequency output pins (Hz)
rf4 (u2) = potential uart input pins (received byte)
rf5 (u2) = potential uart output pins (transmit byte)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  sck1                 spiclk
  sdi1                 miso
  sdo1                 mosi
  int1                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
off
on
error -   ^
error -       ^
on
... testing pins
Welcome to StickOS for Microchip PIC32MXx-F512L UBW32v1 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat re0
safemode* re6
qspi_cs* re1
clone_rst* none
zigflea_rst* re2
zigflea_attn* re3
zigflea_rxtxen re4
lcd_d4 none
lcd_d5 none
lcd_d6 none
lcd_d7 none
lcd_en none
lcd_rs none
kbd_s0 none
kbd_s1 none
kbd_s2 none
kbd_s3 none
kbd_r0 none
kbd_r1 none
kbd_r2 none
kbd_r3 none
... testing jm commands
Welcome to StickOS for Microchip PIC32MXx-F512L UBW32v1 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Microchip PIC32MXx-F512L UBW32v1 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Microchip PIC32MXx-F512L UBW32v1 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform 512L ###
... testing help
Welcome to StickOS for Microchip PIC32MXx-F512L v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Microchip PIC32MXx-F512L v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
usbhost [on|off]                  -- USB host mode (on reset)
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
  0/8     1/9     2/10    3/11    4/12    5/13    6/14    7/15
  ------- ------- ------- ------- ------- ------- ------- --------+
  ra0     ra1     ra2     ra3     ra4     ra5     ra6     ra7     | PORT A
          ra9     ra10                            ra14    ra15    |      A+8
  an0     an1     an2     an3     an4     an5     an6     an7     | PORT B
  an8     an9     an10    an11    an12    an13    an14    an15    |      B+8
          rc1     rc2     rc3     rc4                             | PORT C
                                  rc12    rc13    rc14    rc15    |      C+8
  rd0     rd1     rd2     rd3     rd4     rd5     rd6     rd7     | PORT D
  rd8     rd9     rd10    rd11    rd12    rd13    rd14    rd15    |      D+8
  re0     re1     re2     re3     re4     re5     re6     re7     | PORT E
  re8     re9                                                     |      E+8
  rf0     rf1     rf2     rf3     rf4     rf5                     | PORT F
  rf8                             rf12    rf13                    |      F+8
  rg0     rg1     rg2     rg3                     rg6     rg7     | PORT G
  rg8     rg9                     rg12    rg13    rg14    rg15    |      G+8

all pins support general purpose digital input/output
an? = potential analog input pins (mV)
rd[0-4] = potential analog output (PWM) pins (mV)
rd[0-4] = potential servo output (PWM) pins (us)
rd[0-4] = potential frequency output pins (Hz)
rf4 (u2) = potential uart input pins (received byte)
rf5 (u2) = potential uart output pins (transmit byte)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  sck1                 spiclk
  sdi1                 miso
  sdo1                 mosi
  int1                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
off
on
error -   ^
error -       ^
on
... testing pins
Welcome to StickOS for Microchip PIC32MXx-F512L v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat re0
safemode* re6
qspi_cs* re1
clone_rst* none
zigflea_rst* re2
zigflea_attn* re3
zigflea_rxtxen re4
lcd_d4 none
lcd_d5 none
lcd_d6 none
lcd_d7 none
lcd_en none
lcd_rs none
kbd_s0 none
kbd_s1 none
kbd_s2 none
kbd_s3 none
kbd_r0 none
kbd_r1 none
kbd_r2 none
kbd_r3 none
... testing jm commands
Welcome to StickOS for Microchip PIC32MXx-F512L v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Microchip PIC32MXx-F512L v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Microchip PIC32MXx-F512L v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform 795HBL ###
... testing help
Welcome to StickOS for Microchip PIC32MX7-F512H CUI32Stem v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Microchip PIC32MX7-F512H CUI32Stem v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
usbhost [on|off]                  -- USB host mode (on reset)
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
  0/8     1/9     2/10    3/11    4/12    5/13    6/14    7/15
  ------- ------- ------- ------- ------- ------- ------- --------+
  an0     an1     an2     an3     an4     an5     an6     an7     | PORT B
  an8     an9     an10    an11    an12    an13    an14    an15    |      B+8
          rc1     rc2     rc3     rc4                             | PORT C
                                  rc12    rc13    rc14    rc15    |      C+8
  rd0     rd1     rd2     rd3     rd4     rd5     rd6     rd7     | PORT D
  rd8     rd9     rd10    rd11    rd12    rd13    rd14    rd15    |      D+8
  re0     re1     re2     re3     re4     re5     re6     re7     | PORT E
  re8     re9                                                     |      E+8
  rf0     rf1     rf2     rf3     rf4     rf5                     | PORT F
  rf8                             rf12    rf13                    |      F+8
  rg0     rg1     rg2     rg3                     rg6     rg7     | PORT G
  rg8     rg9                     rg12    rg13    rg14    rg15    |      G+8

all pins support general purpose digital input/output
an? = potential analog input pins (mV)
rd[0-4] = potential analog output (PWM) pins (mV)
rd[0-4] = potential servo output (PWM) pins (us)
rd[0-4] = potential frequency output pins (Hz)
rf4 (u2) = potential uart input pins (received byte)
rf5 (u2) = potential uart output pins (transmit byte)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  sck1                 spiclk
  sdi1                 miso
  sdo1                 mosi
  int1                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
off
on
error -   ^
error -       ^
on
... testing pins
Welcome to StickOS for Microchip PIC32MX7-F512H CUI32Stem v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat re0
safemode* re6
qspi_cs* re1
clone_rst* none
zigflea_rst* re2
zigflea_attn* re3
zigflea_rxtxen re4
lcd_d4 none
lcd_d5 none
lcd_d6 none
lcd_d7 none
lcd_en none
lcd_rs none
kbd_s0 none
kbd_s1 none
kbd_s2 none
kbd_s3 none
kbd_r0 none
kbd_r1 none
kbd_r2 none
kbd_r3 none
... testing jm commands
Welcome to StickOS for Microchip PIC32MX7-F512H CUI32Stem v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Microchip PIC32MX7-F512H CUI32Stem v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Microchip PIC32MX7-F512H CUI32Stem v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform 795H ###
... testing help
Welcome to StickOS for Microchip PIC32MX7-F512H v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Microchip PIC32MX7-F512H v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
usbhost [on|off]                  -- USB host mode (on reset)
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
  0/8     1/9     2/10    3/11    4/12    5/13    6/14    7/15
  ------- ------- ------- ------- ------- ------- ------- --------+
  an0     an1     an2     an3     an4     an5     an6     an7     | PORT B
  an8     an9     an10    an11    an12    an13    an14    an15    |      B+8
          rc1     rc2     rc3     rc4                             | PORT C
                                  rc12    rc13    rc14    rc15    |      C+8
  rd0     rd1     rd2     rd3     rd4     rd5     rd6     rd7     | PORT D
  rd8     rd9     rd10    rd11    rd12    rd13    rd14    rd15    |      D+8
  re0     re1     re2     re3     re4     re5     re6     re7     | PORT E
  re8     re9                                                     |      E+8
  rf0     rf1     rf2     rf3     rf4     rf5                     | PORT F
  rf8                             rf12    rf13                    |      F+8
  rg0     rg1     rg2     rg3                     rg6     rg7     | PORT G
  rg8     rg9                     rg12    rg13    rg14    rg15    |      G+8

all pins support general purpose digital input/output
an? = potential analog input pins (mV)
rd[0-4] = potential analog output (PWM) pins (mV)
rd[0-4] = potential servo output (PWM) pins (us)
rd[0-4] = potential frequency output pins (Hz)
rf4 (u2) = potential uart input pins (received byte)
rf5 (u2) = potential uart output pins (transmit byte)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  sck1                 spiclk
  sdi1                 miso
  sdo1                 mosi
  int1                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
off
on
error -   ^
error -       ^
on
... testing pins
Welcome to StickOS for Microchip PIC32MX7-F512H v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat re0
safemode* re6
qspi_cs* re1
clone_rst* none
zigflea_rst* re2
zigflea_attn* re3
zigflea_rxtxen re4
lcd_d4 none
lcd_d5 none
lcd_d6 none
lcd_d7 none
lcd_en none
lcd_rs none
kbd_s0 none
kbd_s1 none
kbd_s2 none
kbd_s3 none
kbd_r0 none
kbd_r1 none
kbd_r2 none
kbd_r3 none
... testing jm commands
Welcome to StickOS for Microchip PIC32MX7-F512H v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Microchip PIC32MX7-F512H v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Microchip PIC32MX7-F512H v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform 795LBL ###
... testing help
Welcome to StickOS for Microchip PIC32MX7-F512L UBW32v2 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Microchip PIC32MX7-F512L UBW32v2 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
usbhost [on|off]                  -- USB host mode (on reset)
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
  0/8     1/9     2/10    3/11    4/12    5/13    6/14    7/15
  ------- ------- ------- ------- ------- ------- ------- --------+
  ra0     ra1     ra2     ra3     ra4     ra5     ra6     ra7     | PORT A
          ra9     ra10                            ra14    ra15    |      A+8
  an0     an1     an2     an3     an4     an5     an6     an7     | PORT B
  an8     an9     an10    an11    an12    an13    an14    an15    |      B+8
          rc1     rc2     rc3     rc4                             | PORT C
                                  rc12    rc13    rc14    rc15    |      C+8
  rd0     rd1     rd2     rd3     rd4     rd5     rd6     rd7     | PORT D
  rd8     rd9     rd10    rd11    rd12    rd13    rd14    rd15    |      D+8
  re0     re1     re2     re3     re4     re5     re6     re7     | PORT E
  re8     re9                                                     |      E+8
  rf0     rf1     rf2     rf3     rf4     rf5                     | PORT F
  rf8                             rf12    rf13                    |      F+8
  rg0     rg1     rg2     rg3                     rg6     rg7     | PORT G
  rg8     rg9                     rg12    rg13    rg14    rg15    |      G+8

all pins support general purpose digital input/output
an? = potential analog input pins (mV)
rd[0-4] = potential analog output (PWM) pins (mV)
rd[0-4] = potential servo output (PWM) pins (us)
rd[0-4] = potential frequency output pins (Hz)
rf4 (u2) = potential uart input pins (received byte)
rf5 (u2) = potential uart output pins (transmit byte)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  sck1                 spiclk
  sdi1                 miso
  sdo1                 mosi
  int1                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
off
on
error -   ^
error -       ^
on
... testing pins
Welcome to StickOS for Microchip PIC32MX7-F512L UBW32v2 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat re0
safemode* re6
qspi_cs* re1
clone_rst* none
zigflea_rst* re2
zigflea_attn* re3
zigflea_rxtxen re4
lcd_d4 none
lcd_d5 none
lcd_d6 none
lcd_d7 none
lcd_en none
lcd_rs none
kbd_s0 none
kbd_s1 none
kbd_s2 none
kbd_s3 none
kbd_r0 none
kbd_r1 none
kbd_r2 none
kbd_r3 none
... testing jm commands
Welcome to StickOS for Microchip PIC32MX7-F512L UBW32v2 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Microchip PIC32MX7-F512L UBW32v2 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Microchip PIC32MX7-F512L UBW32v2 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform 795L ###
... testing help
Welcome to StickOS for Microchip PIC32MX7-F512L v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Microchip PIC32MX7-F512L v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
usbhost [on|off]                  -- USB host mode (on reset)
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
  0/8     1/9     2/10    3/11    4/12    5/13    6/14    7/15
  ------- ------- ------- ------- ------- ------- ------- --------+
  ra0     ra1     ra2     ra3     ra4     ra5     ra6     ra7     | PORT A
          ra9     ra10                            ra14    ra15    |      A+8
  an0     an1     an2     an3     an4     an5     an6     an7     | PORT B
  an8     an9     an10    an11    an12    an13    an14    an15    |      B+8
          rc1     rc2     rc3     rc4                             | PORT C
                                  rc12    rc13    rc14    rc15    |      C+8
  rd0     rd1     rd2     rd3     rd4     rd5     rd6     rd7     | PORT D
  rd8     rd9     rd10    rd11    rd12    rd13    rd14    rd15    |      D+8
  re0     re1     re2     re3     re4     re5     re6     re7     | PORT E
  re8     re9                                                     |      E+8
  rf0     rf1     rf2     rf3     rf4     rf5                     | PORT F
  rf8                             rf12    rf13                    |      F+8
  rg0     rg1     rg2     rg3                     rg6     rg7     | PORT G
  rg8     rg9                     rg12    rg13    rg14    rg15    |      G+8

all pins support general purpose digital input/output
an? = potential analog input pins (mV)
rd[0-4] = potential analog output (PWM) pins (mV)
rd[0-4] = potential servo output (PWM) pins (us)
rd[0-4] = potential frequency output pins (Hz)
rf4 (u2) = potential uart input pins (received byte)
rf5 (u2) = potential uart output pins (transmit byte)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  sck1                 spiclk
  sdi1                 miso
  sdo1                 mosi
  int1                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
off
on
error -   ^
error -       ^
on
... testing pins
Welcome to StickOS for Microchip PIC32MX7-F512L v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat re0
safemode* re6
qspi_cs* re1
clone_rst* none
zigflea_rst* re2
zigflea_attn* re3
zigflea_rxtxen re4
lcd_d4 none
lcd_d5 none
lcd_d6 none
lcd_d7 none
lcd_en none
lcd_rs none
kbd_s0 none
kbd_s1 none
kbd_s2 none
kbd_s3 none
kbd_r0 none
kbd_r1 none
kbd_r2 none
kbd_r3 none
... testing jm commands
Welcome to StickOS for Microchip PIC32MX7-F512L v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Microchip PIC32MX7-F512L v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Microchip PIC32MX7-F512L v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform UNO32 ###
... testing help
Welcome to StickOS for Microchip PIC32MXx-F128H chipKIT Uno32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Microchip PIC32MXx-F128H chipKIT Uno32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
  a0-a11, 0-13, 26-41, 43, rg2, rg3, rg9

jumpers:
  jp5,jp7=master, jp4=rd4

all pins support general purpose digital input/output
a? = potential analog input pins (mV)
3,5,6,9,10 = potential analog output (PWM) pins (mV)
3,5,6,9,10 = potential servo output (PWM) pins (us)
3,5,6,9,10 = potential frequency output pins (Hz)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  sck1                 spiclk
  sdi1                 miso
  sdo1                 mosi
  int1                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
         ^ - error
error -   ^
         ^ - error
error -   ^
error -   ^
         ^ - error
... testing pins
Welcome to StickOS for Microchip PIC32MXx-F128H chipKIT Uno32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat 13
safemode* a10
qspi_cs* rg9
clone_rst* none
zigflea_rst* none
zigflea_attn* none
zigflea_rxtxen none
lcd_d4 none
lcd_d5 none
lcd_d6 none
lcd_d7 none
lcd_en none
lcd_rs none
kbd_s0 none
kbd_s1 none
kbd_s2 none
kbd_s3 none
kbd_r0 none
kbd_r1 none
kbd_r2 none
kbd_r3 none
... testing jm commands
Welcome to StickOS for Microchip PIC32MXx-F128H chipKIT Uno32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Microchip PIC32MXx-F128H chipKIT Uno32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Microchip PIC32MXx-F128H chipKIT Uno32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform MAX32 ###
... testing help
Welcome to StickOS for Microchip PIC32MX7-F512L chipKIT Max32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Microchip PIC32MX7-F512L chipKIT Max32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
keychars [<keychars>]             -- set/display keypad scan chars
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
usbhost [on|off]                  -- USB host mode (on reset)
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
lcd <pos>, [dec|hex|raw] <expression> [, ...] [;] -- display results on lcd
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  keychar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
  a0-a15, 0-13, 16-23, 28-39, 43-49, 52-53, 70-85

pin aliases:
  40=a11, 41=a13, 42=a12, 50=29, 51=43

jumpers:
  jp3,jp4=master

all pins support general purpose digital input/output
a? = potential analog input pins (mV)
3,5,6,9,10 = potential analog output (PWM) pins (mV)
3,5,6,9,10 = potential servo output (PWM) pins (us)
3,5,6,9,10 = potential frequency output pins (Hz)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  sck1                 spiclk
  sdi1                 miso
  sdo1                 mosi
  int1                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
off
on
error -   ^
error -       ^
on
... testing pins
Welcome to StickOS for Microchip PIC32MX7-F512L chipKIT Max32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat 13
safemode* a13
qspi_cs* 53
clone_rst* none
zigflea_rst* none
zigflea_attn* none
zigflea_rxtxen none
lcd_d4 none
lcd_d5 none
lcd_d6 none
lcd_d7 none
lcd_en none
lcd_rs none
kbd_s0 none
kbd_s1 none
kbd_s2 none
kbd_s3 none
kbd_r0 none
kbd_r1 none
kbd_r2 none
kbd_r3 none
... testing jm commands
Welcome to StickOS for Microchip PIC32MX7-F512L chipKIT Max32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -      ^
error -      ^
error -    ^
error -    ^
error -    ^
error -      ^
error -      ^
error -      ^
end
... testing ipaddress
Welcome to StickOS for Microchip PIC32MX7-F512L chipKIT Max32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -    ^
error -     ^
error -    ^
error -     ^
error -    ^
... testing reset
Welcome to StickOS for Microchip PIC32MX7-F512L chipKIT Max32 v1.92!
Copyright (c) 2008-2012; all rights reserved.
http://www.cpustick.com
support@cpustick.com
